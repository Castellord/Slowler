import os
import tempfile
import zipfile
from flask import Flask, request, jsonify, send_file, Response
from flask_cors import CORS
import json
import threading
import queue
import librosa
import numpy as np
from scipy import signal
import io
import warnings
import base64
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º non-interactive backend
import matplotlib.pyplot as plt
from matplotlib.colors import LinearSegmentedColormap
warnings.filterwarnings('ignore')

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import soundfile as sf
    HAS_SOUNDFILE = True
    print("‚úÖ soundfile –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    HAS_SOUNDFILE = False
    print("‚ö†Ô∏è  soundfile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º scipy –¥–ª—è –∑–∞–ø–∏—Å–∏")

try:
    import pyrubberband as pyrb
    HAS_RUBBERBAND = True
    print("‚úÖ pyrubberband –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    HAS_RUBBERBAND = False
    print("‚ö†Ô∏è  pyrubberband –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º librosa")

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB max file size
UPLOAD_FOLDER = tempfile.mkdtemp()
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def process_audio_with_rubberband(audio_path, speed_factor, preserve_pitch=True):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É—á—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        wav_path = convert_to_wav_if_needed(audio_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Rubber Band –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if HAS_RUBBERBAND:
            try:
                print(f"üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º Rubber Band —Å —Ñ–∞–π–ª–æ–º: {wav_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if not os.path.exists(wav_path):
                    raise Exception(f"WAV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wav_path}")
                
                file_size = os.path.getsize(wav_path)
                if file_size < 1000:
                    raise Exception(f"WAV —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {file_size} –±–∞–π—Ç")
                
                print(f"üìä –†–∞–∑–º–µ—Ä WAV —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pyrubberband —Å —Ñ–∞–π–ª–æ–º –Ω–∞–ø—Ä—è–º—É—é
                import subprocess
                import tempfile
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                temp_fd, temp_output = tempfile.mkstemp(suffix='.wav')
                os.close(temp_fd)
                
                try:
                    if preserve_pitch:
                        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                        cmd = [
                            'rubberband',
                            '--time', str(1.0 / speed_factor),
                            '--pitch-hq',
                            wav_path,
                            temp_output
                        ]
                    else:
                        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        cmd = [
                            'rubberband',
                            '--speed', str(speed_factor),
                            wav_path,
                            temp_output
                        ]
                    
                    print(f"üîß –ö–æ–º–∞–Ω–¥–∞ Rubber Band: {' '.join(cmd)}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    result = subprocess.run(cmd, capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        processed_y, processed_sr = load_audio_with_scipy(temp_output)
                        
                        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Rubber Band –∞–ª–≥–æ—Ä–∏—Ç–º")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        try:
                            os.unlink(temp_output)
                            if wav_path != audio_path:
                                os.unlink(wav_path)
                        except:
                            pass
                        
                        return processed_y, processed_sr
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã Rubber Band: {result.stderr}")
                        raise Exception(f"Rubber Band –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                
                except Exception as e:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        os.unlink(temp_output)
                    except:
                        pass
                    raise e
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Rubber Band: {e}")
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Custom STFT –∞–ª–≥–æ—Ä–∏—Ç–º")
        
        # Fallback –Ω–∞ –Ω–∞—à–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        return process_audio_with_librosa(wav_path, speed_factor, preserve_pitch)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        return process_audio_with_librosa(audio_path, speed_factor, preserve_pitch)

def convert_to_wav_if_needed(audio_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MP3 –≤ WAV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    _, ext = os.path.splitext(audio_path.lower())
    
    if ext == '.wav':
        print(f"üìÅ –§–∞–π–ª —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV: {audio_path}")
        return audio_path
    
    elif ext == '.mp3':
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 –≤ WAV: {audio_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è WAV —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        base_name = os.path.splitext(os.path.basename(audio_path))[0]
        wav_filename = f"{base_name}_converted.wav"
        wav_path = os.path.join(os.path.dirname(audio_path), wav_filename)
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ pydub
            from pydub import AudioSegment
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3
            audio = AudioSegment.from_mp3(audio_path)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ WAV –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            audio.export(
                wav_path,
                format="wav",
                parameters=[
                    "-acodec", "pcm_s16le",  # 16-bit PCM
                    "-ar", "44100",          # 44.1kHz
                    "-ac", "2"               # –°—Ç–µ—Ä–µ–æ
                ]
            )
            
            print(f"‚úÖ MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WAV: {wav_path}")
            return wav_path
            
        except ImportError:
            print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg")
            return convert_mp3_with_ffmpeg(audio_path)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ pydub: {e}")
            return convert_mp3_with_ffmpeg(audio_path)
    
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")

def convert_mp3_with_ffmpeg(audio_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV —á–µ—Ä–µ–∑ ffmpeg
    """
    import subprocess
    import os
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è WAV —Ñ–∞–π–ª–∞
    base_name = os.path.splitext(os.path.basename(audio_path))[0]
    wav_filename = f"{base_name}_converted.wav"
    wav_path = os.path.join(os.path.dirname(audio_path), wav_filename)
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
        cmd = [
            'ffmpeg', '-i', audio_path,
            '-acodec', 'pcm_s16le',
            '-ar', '44100',
            '-ac', '2',
            '-y', wav_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ ffmpeg: {wav_path}")
            return wav_path
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg: {e}")
        raise

def create_compatible_wav_for_rubberband(audio_data, sample_rate):
    """
    –°–æ–∑–¥–∞–µ—Ç WAV —Ñ–∞–π–ª –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å Rubber Band —Ñ–æ—Ä–º–∞—Ç–µ (int16, 44.1kHz, stereo)
    """
    import tempfile
    from scipy.io.wavfile import write
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_fd, temp_path = tempfile.mkstemp(suffix='.wav')
    os.close(temp_fd)
    
    try:
        print(f"üîß –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: shape={audio_data.shape}, sr={sample_rate}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_audio = audio_data.copy()
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 44.1kHz
        target_sr = 44100
        if sample_rate != target_sr:
            print(f"üîÑ –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ —Å {sample_rate}Hz –Ω–∞ {target_sr}Hz")
            # –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ –¥–æ 44.1kHz
            from scipy import signal
            processed_channels = []
            for channel in range(processed_audio.shape[0]):
                resampled = signal.resample(
                    processed_audio[channel], 
                    int(len(processed_audio[channel]) * target_sr / sample_rate)
                )
                processed_channels.append(resampled)
            processed_audio = np.array(processed_channels)
            sample_rate = target_sr
        
        print(f"üéµ –ü–æ—Å–ª–µ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: shape={processed_audio.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        if processed_audio.size == 0:
            raise ValueError("–ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16
        processed_audio = np.clip(processed_audio, -1.0, 1.0)
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (samples, channels)
        if processed_audio.ndim == 2:
            audio_for_write = processed_audio.T
            print(f"üìä –°—Ç–µ—Ä–µ–æ –¥–∞–Ω–Ω—ã–µ: {audio_for_write.shape} (samples, channels)")
        else:
            audio_for_write = processed_audio
            print(f"üìä –ú–æ–Ω–æ –¥–∞–Ω–Ω—ã–µ: {audio_for_write.shape}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16
        audio_int16 = (audio_for_write * 32767).astype(np.int16)
        
        print(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV: {audio_int16.shape}, dtype={audio_int16.dtype}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV —Ñ–∞–π–ª
        write(temp_path, sample_rate, audio_int16)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(temp_path)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π WAV: {sample_rate}Hz, int16, {'stereo' if audio_for_write.ndim == 2 else 'mono'}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        if file_size < 1000:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 1KB, –≤–µ—Ä–æ—è—Ç–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {file_size} –±–∞–π—Ç")
        
        return temp_path
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ WAV: {e}")
        import traceback
        traceback.print_exc()
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            os.unlink(temp_path)
        except:
            pass
        raise

def process_audio_with_librosa(audio_path, speed_factor, preserve_pitch=True):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ librosa - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ scipy –∏ numpy
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ scipy
        y, sr = load_audio_with_scipy(audio_path)
        
        if y.ndim == 1:
            y = np.array([y, y])
        
        if preserve_pitch:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π STFT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            processed = process_with_custom_stft_stretch(y, speed_factor, sr)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
            processed = process_with_resampling(y, speed_factor, sr)
        
        return processed, sr
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        return process_audio_simple_fallback(audio_path, speed_factor)

def load_audio_with_scipy(audio_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ scipy –±–µ–∑ librosa
    """
    try:
        from scipy.io import wavfile
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        _, ext = os.path.splitext(audio_path.lower())
        
        if ext == '.wav':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV —Ñ–∞–π–ª
            sr, data = wavfile.read(audio_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
            if data.dtype == np.int16:
                data = data.astype(np.float32) / 32768.0
            elif data.dtype == np.int32:
                data = data.astype(np.float32) / 2147483648.0
            elif data.dtype == np.uint8:
                data = (data.astype(np.float32) - 128) / 128.0
            
            # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            if data.ndim == 2:
                data = data.T  # (channels, samples)
            
            return data, sr
            
        elif ext == '.mp3':
            # –î–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV
            return convert_mp3_to_wav_and_load(audio_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        raise

def convert_mp3_to_wav_and_load(mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ pydub
    """
    try:
        from pydub import AudioSegment
        import tempfile
        import os
        
        print("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 —Ñ–∞–π–ª...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3 —á–µ—Ä–µ–∑ pydub
        audio = AudioSegment.from_mp3(mp3_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        samples = audio.get_array_of_samples()
        audio_data = np.array(samples, dtype=np.float32)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if audio.sample_width == 2:  # 16-bit
            audio_data = audio_data / 32768.0
        elif audio.sample_width == 4:  # 32-bit
            audio_data = audio_data / 2147483648.0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–µ—Ä–µ–æ
        if audio.channels == 2:
            audio_data = audio_data.reshape((-1, 2)).T
        else:
            # –ú–æ–Ω–æ -> —Å—Ç–µ—Ä–µ–æ
            audio_data = np.array([audio_data, audio_data])
        
        return audio_data, audio.frame_rate
        
    except ImportError:
        print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
        return load_mp3_basic(mp3_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP3: {e}")
        return load_mp3_basic(mp3_path)

def load_mp3_basic(mp3_path):
    """
    –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ MP3 —á–µ—Ä–µ–∑ ffmpeg
    """
    try:
        import subprocess
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            temp_wav_path = temp_wav.name
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
        cmd = [
            'ffmpeg', '-i', mp3_path, 
            '-acodec', 'pcm_s16le', 
            '-ar', '44100', 
            '-ac', '2',
            '-y', temp_wav_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WAV
            data, sr = load_audio_with_scipy(temp_wav_path)
            os.unlink(temp_wav_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            return data, sr
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ MP3: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        return create_silence_fallback()

def create_silence_fallback():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∏—à–∏–Ω—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    """
    sr = 44100
    duration = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
    samples = sr * duration
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É
    silence = np.zeros((2, samples), dtype=np.float32)
    
    return silence, sr

def process_with_custom_stft_stretch(y, speed_factor, sr):
    """
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –±–µ–∑ librosa
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STFT
        n_fft = 2048
        hop_length = n_fft // 4
        
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT
            stft = custom_stft(y[channel], n_fft, hop_length)
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            stretched_stft = stretch_stft(stft, speed_factor)
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ STFT
            stretched_audio = custom_istft(stretched_stft, hop_length)
            processed_channels.append(stretched_audio)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ custom STFT: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        return process_simple_stretch(y, speed_factor)

def custom_stft(signal, n_fft, hop_length):
    """
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT
    """
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –•—ç–Ω–Ω–∏–Ω–≥–∞
    window = np.hanning(n_fft)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
    n_frames = (len(signal) - n_fft) // hop_length + 1
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ STFT
    stft_matrix = np.zeros((n_fft // 2 + 1, n_frames), dtype=complex)
    
    for i in range(n_frames):
        start = i * hop_length
        end = start + n_fft
        
        if end <= len(signal):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–Ω–æ
            frame = signal[start:end] * window
            
            # FFT
            fft_frame = np.fft.rfft(frame)
            stft_matrix[:, i] = fft_frame
    
    return stft_matrix

def custom_istft(stft_matrix, hop_length):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ STFT —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    """
    n_fft = (stft_matrix.shape[0] - 1) * 2
    n_frames = stft_matrix.shape[1]
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
    window = np.hanning(n_fft)
    
    # –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    signal_length = (n_frames - 1) * hop_length + n_fft
    reconstructed = np.zeros(signal_length)
    window_sum = np.zeros(signal_length)
    
    for i in range(n_frames):
        start = i * hop_length
        end = start + n_fft
        
        if end <= len(reconstructed):
            # –û–±—Ä–∞—Ç–Ω–æ–µ FFT
            frame = np.fft.irfft(stft_matrix[:, i], n_fft)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            windowed_frame = frame * window
            reconstructed[start:end] += windowed_frame
            window_sum[start:end] += window * window
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—É–º–º–µ –æ–∫–æ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏—Å–∫–∞–∂–µ–Ω–∏–π
    nonzero_indices = window_sum > 1e-10
    reconstructed[nonzero_indices] /= window_sum[nonzero_indices]
    
    return reconstructed

def process_audio_simple_fallback(audio_path, speed_factor):
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π fallback")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
    sr = 44100
    duration = int(10 / speed_factor)  # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    t = np.linspace(0, duration, sr * duration)
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
    freq = 440
    signal = 0.3 * np.sin(2 * np.pi * freq * t)
    
    # –°—Ç–µ—Ä–µ–æ –≤–µ—Ä—Å–∏—è
    stereo_signal = np.array([signal, signal])
    
    return stereo_signal, sr

def process_with_stft_stretch(y, speed_factor, sr):
    """
    –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ STFT
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STFT
        n_fft = 2048
        hop_length = n_fft // 4
        
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –ü—Ä—è–º–æ–µ STFT
            stft = librosa.stft(y[channel], n_fft=n_fft, hop_length=hop_length)
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            stretched_stft = stretch_stft(stft, speed_factor)
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ STFT
            stretched_audio = librosa.istft(stretched_stft, hop_length=hop_length)
            processed_channels.append(stretched_audio)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ STFT: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        return process_simple_stretch(y, speed_factor)

def stretch_stft(stft, speed_factor):
    """
    –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ STFT –º–∞—Ç—Ä–∏—Ü—ã
    """
    original_frames = stft.shape[1]
    new_frames = int(original_frames / speed_factor)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é STFT –º–∞—Ç—Ä–∏—Ü—É
    stretched = np.zeros((stft.shape[0], new_frames), dtype=complex)
    
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ñ–∞–∑—ã –∏ –∞–º–ø–ª–∏—Ç—É–¥—ã
    for i in range(new_frames):
        source_frame = i * speed_factor
        frame_idx = int(source_frame)
        fraction = source_frame - frame_idx
        
        if frame_idx + 1 < original_frames:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥
            amp1 = np.abs(stft[:, frame_idx])
            amp2 = np.abs(stft[:, frame_idx + 1])
            interp_amp = amp1 * (1 - fraction) + amp2 * fraction
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∑—É –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            phase = np.angle(stft[:, frame_idx])
            
            stretched[:, i] = interp_amp * np.exp(1j * phase)
        elif frame_idx < original_frames:
            stretched[:, i] = stft[:, frame_idx]
    
    return stretched

def process_with_resampling(y, speed_factor, sr):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
    """
    try:
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏–Ω—É —Å–∏–≥–Ω–∞–ª–∞
            new_length = int(len(y[channel]) / speed_factor)
            
            # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            old_indices = np.arange(len(y[channel]))
            new_indices = np.linspace(0, len(y[channel]) - 1, new_length)
            
            resampled = np.interp(new_indices, old_indices, y[channel])
            processed_channels.append(resampled)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: {e}")
        return process_simple_stretch(y, speed_factor)

def process_simple_stretch(y, speed_factor):
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫
    """
    processed_channels = []
    
    for channel in range(y.shape[0]):
        original_length = len(y[channel])
        new_length = int(original_length / speed_factor)
        
        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        old_indices = np.linspace(0, original_length - 1, original_length)
        new_indices = np.linspace(0, original_length - 1, new_length)
        
        stretched = np.interp(new_indices, old_indices, y[channel])
        processed_channels.append(stretched)
    
    return np.array(processed_channels)

def process_audio_simple(audio_path, speed_factor):
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    """
    y, sr = librosa.load(audio_path, sr=None, mono=False)
    
    if y.ndim == 1:
        y = np.array([y, y])
    
    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    original_length = y.shape[1]
    new_length = int(original_length / speed_factor)
    
    processed = np.zeros((y.shape[0], new_length))
    for channel in range(y.shape[0]):
        processed[channel] = np.interp(
            np.linspace(0, original_length - 1, new_length),
            np.arange(original_length),
            y[channel]
        )
    
    return processed, sr

def save_with_scipy(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ scipy
    """
    try:
        from scipy.io.wavfile import write
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scipy
        if processed_audio.ndim == 2:
            # –î–ª—è —Å—Ç–µ—Ä–µ–æ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º: (channels, samples) -> (samples, channels)
            audio_for_scipy = processed_audio.T
        else:
            # –ú–æ–Ω–æ
            audio_for_scipy = processed_audio
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit integer
        audio_for_scipy = np.clip(audio_for_scipy, -1.0, 1.0)
        audio_int16 = (audio_for_scipy * 32767).astype(np.int16)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV —Ñ–∞–π–ª
        write(output_path, sr, audio_int16)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ scipy: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ scipy: {e}")
        raise

def normalize_audio(audio):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–ª–∏–ø–ø–∏–Ω–≥–∞
    """
    # RMS –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
    rms = np.sqrt(np.mean(audio**2))
    if rms > 0:
        # –¶–µ–ª–µ–≤–æ–π RMS —É—Ä–æ–≤–µ–Ω—å
        target_rms = 0.2
        audio = audio * (target_rms / rms)
    
    # –ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∏–∫–æ–≤
    peak = np.max(np.abs(audio))
    if peak > 0.95:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tanh –¥–ª—è –º—è–≥–∫–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        audio = np.tanh(audio * 0.9) * 0.9
    
    return audio

def save_audio_in_format(output_path, processed_audio, sr, output_format='wav'):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (WAV –∏–ª–∏ MP3)
    """
    try:
        if output_format.lower() == 'mp3':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MP3
            return save_as_mp3(output_path, processed_audio, sr)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            return save_as_wav(output_path, processed_audio, sr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format}: {e}")
        raise

def save_as_wav(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV
    """
    try:
        if HAS_SOUNDFILE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º soundfile –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                if processed_audio.ndim == 2:
                    # soundfile –æ–∂–∏–¥–∞–µ—Ç (samples, channels)
                    audio_for_sf = processed_audio.T
                else:
                    audio_for_sf = processed_audio
                
                sf.write(output_path, audio_for_sf, sr, format='WAV', subtype='PCM_16')
                print(f"‚úÖ WAV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ soundfile: {output_path}")
                return output_path
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ soundfile: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º scipy")
                return save_with_scipy(output_path, processed_audio, sr)
        else:
            return save_with_scipy(output_path, processed_audio, sr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV: {e}")
        raise

def save_as_mp3(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        temp_wav_path = output_path.replace('.mp3', '_temp.wav')
        save_as_wav(temp_wav_path, processed_audio, sr)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3
        return convert_wav_to_mp3(temp_wav_path, output_path)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3: {e}")
        raise

def convert_wav_to_mp3(wav_path, mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV –≤ MP3 —á–µ—Ä–µ–∑ pydub –∏–ª–∏ ffmpeg
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pydub
        from pydub import AudioSegment
        
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3: {wav_path} -> {mp3_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV
        audio = AudioSegment.from_wav(wav_path)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ MP3 —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        audio.export(
            mp3_path,
            format="mp3",
            bitrate="320k",  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            parameters=["-q:a", "0"]  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        try:
            os.unlink(wav_path)
        except:
            pass
        
        print(f"‚úÖ MP3 —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {mp3_path}")
        return mp3_path
        
    except ImportError:
        print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg")
        return convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ pydub: {e}")
        return convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path)

def convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV –≤ MP3 —á–µ—Ä–µ–∑ ffmpeg
    """
    try:
        import subprocess
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        cmd = [
            'ffmpeg', '-i', wav_path,
            '-codec:a', 'libmp3lame',
            '-b:a', '320k',  # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç
            '-q:a', '0',     # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            '-y', mp3_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            try:
                os.unlink(wav_path)
            except:
                pass
            
            print(f"‚úÖ MP3 —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ ffmpeg: {mp3_path}")
            return mp3_path
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg: {e}")
        raise


@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({'status': 'healthy', 'message': 'Audio processing server is running'})

@app.route('/process', methods=['POST'])
def process_audio():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if 'files' not in request.files:
            return jsonify({'error': '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
        
        files = request.files.getlist('files')
        speeds = request.form.getlist('speeds')
        preserve_pitch = request.form.get('preserve_pitch', 'true').lower() == 'true'
        output_format = request.form.get('output_format', 'wav').lower()
        session_id = request.form.get('session_id', 'default')
        
        if len(files) != len(speeds):
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if output_format not in ['wav', 'mp3']:
            return jsonify({'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {output_format}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: wav, mp3'}), 400
        
        print(f"üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}")
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: preserve_pitch={preserve_pitch}")
        
        print(f"üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        temp_dir = tempfile.mkdtemp()
        processed_files = []
        
        try:
            for i, (file, speed_str) in enumerate(zip(files, speeds)):
                if file.filename == '':
                    continue
                
                try:
                    speed = float(speed_str)
                    if speed <= 0 or speed > 10:
                        return jsonify({'error': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}'}), 400
                except ValueError:
                    return jsonify({'error': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {speed_str}'}), 400
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                input_path = os.path.join(temp_dir, f'input_{i}_{file.filename}')
                file.save(input_path)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                try:
                    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i+1}/{len(files)}: {file.filename}")
                    print(f"üéõÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: {speed}x, –§–æ—Ä–º–∞—Ç: {output_format.upper()}")
                    
                    processed_audio, sr = process_audio_with_rubberband(
                        input_path, speed, preserve_pitch
                    )
                    
                    print(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...")
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                    processed_audio = normalize_audio(processed_audio)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏ –ø—É—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                    base_name = os.path.splitext(file.filename)[0]
                    output_filename = f"{base_name}_slowed.{output_format}"
                    output_path = os.path.join(temp_dir, output_filename)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}: {processed_audio.shape}, sr={sr}")
                    
                    final_path = save_audio_in_format(output_path, processed_audio, sr, output_format)
                    processed_files.append((final_path, output_filename))
                    
                    print(f"‚úÖ –§–∞–π–ª {file.filename} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
                    return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}'}), 500
            
            if not processed_files:
                return jsonify({'error': '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'}), 400
            
            print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞...")
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for file_path, filename in processed_files:
                    zip_file.write(file_path, filename)
            
            zip_buffer.seek(0)
            
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            return send_file(
                zip_buffer,
                mimetype='application/zip',
                as_attachment=True,
                download_name='slowed_audio_files.zip'
            )
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass
                
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/test', methods=['POST'])
def test_processing():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        speed = float(request.form.get('speed', 0.5))
        preserve_pitch = request.form.get('preserve_pitch', 'true').lower() == 'true'
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = tempfile.mkdtemp()
        input_path = os.path.join(temp_dir, file.filename)
        file.save(input_path)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            processed_audio, sr = process_audio_with_rubberband(input_path, speed, preserve_pitch)
            processed_audio = normalize_audio(processed_audio)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            return jsonify({
                'success': True,
                'original_duration': librosa.get_duration(path=input_path),
                'processed_duration': len(processed_audio[0]) / sr if processed_audio.ndim == 2 else len(processed_audio) / sr,
                'sample_rate': int(sr),
                'channels': processed_audio.shape[0] if processed_audio.ndim == 2 else 1,
                'speed_factor': speed,
                'preserve_pitch': preserve_pitch
            })
            
        finally:
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass
                
    except Exception as e:
        return jsonify({'error': str(e)}), 500


def analyze_audio_file(audio_path):
    """
    –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª: {audio_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        y, sr = librosa.load(audio_path, sr=None, mono=False)
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, –±–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if y.ndim == 2:
            y_mono = np.mean(y, axis=0)
        else:
            y_mono = y
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        duration = len(y_mono) / sr
        file_size = os.path.getsize(audio_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        _, ext = os.path.splitext(audio_path.lower())
        audio_format = ext[1:].upper() if ext else 'Unknown'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        bit_depth = 16  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤
        if audio_format == 'WAV':
            try:
                from scipy.io import wavfile
                _, data = wavfile.read(audio_path)
                if data.dtype == np.int16:
                    bit_depth = 16
                elif data.dtype == np.int32:
                    bit_depth = 32
                elif data.dtype == np.float32:
                    bit_depth = 32
            except:
                pass
        
        # –ê–Ω–∞–ª–∏–∑ BPM (—Ç–µ–º–ø)
        print("ü•Å –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º BPM...")
        try:
            tempo, beats = librosa.beat.beat_track(y=y_mono, sr=sr)
            bpm = float(tempo)
        except:
            bpm = None
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        print("üéº –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º chroma features –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            chroma = librosa.feature.chroma_stft(y=y_mono, sr=sr)
            chroma_mean = np.mean(chroma, axis=1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            key_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']
            key_index = np.argmax(chroma_mean)
            key = key_names[key_index]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∂–æ—Ä/–º–∏–Ω–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∞–¥–∞
            major_profile = np.array([1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1])
            minor_profile = np.array([1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0])
            
            # –°–¥–≤–∏–≥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
            major_shifted = np.roll(major_profile, key_index)
            minor_shifted = np.roll(minor_profile, key_index)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            major_corr = np.corrcoef(chroma_mean, major_shifted)[0, 1]
            minor_corr = np.corrcoef(chroma_mean, minor_shifted)[0, 1]
            
            if major_corr > minor_corr:
                key_signature = f"{key} Major"
            else:
                key_signature = f"{key} Minor"
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            key_signature = "Unknown"
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("üìä –°–æ–∑–¥–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É...")
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É
            D = librosa.stft(y_mono)
            S_db = librosa.amplitude_to_db(np.abs(D), ref=np.max)
            
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
            plt.figure(figsize=(12, 6))
            plt.style.use('dark_background')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
            colors = ['#0a0a0f', '#1a1a2e', '#8b5cf6', '#a78bfa', '#ffffff']
            n_bins = 256
            cmap = LinearSegmentedColormap.from_list('custom', colors, N=n_bins)
            
            librosa.display.specshow(
                S_db, 
                sr=sr, 
                x_axis='time', 
                y_axis='hz',
                cmap=cmap,
                fmax=8000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            )
            
            plt.colorbar(format='%+2.0f dB', label='Amplitude (dB)')
            plt.title('–°–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞', color='white', fontsize=14, pad=20)
            plt.xlabel('–í—Ä–µ–º—è (—Å)', color='white')
            plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)', color='white')
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
            plt.gca().set_facecolor('#0a0a0f')
            plt.gcf().patch.set_facecolor('#0a0a0f')
            plt.tick_params(colors='white')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=100, bbox_inches='tight', 
                       facecolor='#0a0a0f', edgecolor='none')
            buffer.seek(0)
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
            spectrogram_base64 = base64.b64encode(buffer.getvalue()).decode('utf-8')
            plt.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
            spectrogram_base64 = None
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        print("üìà –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏...")
        try:
            # RMS —ç–Ω–µ—Ä–≥–∏—è
            rms = librosa.feature.rms(y=y_mono)[0]
            avg_rms = float(np.mean(rms))
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ (—è—Ä–∫–æ—Å—Ç—å)
            spectral_centroids = librosa.feature.spectral_centroid(y=y_mono, sr=sr)[0]
            avg_spectral_centroid = float(np.mean(spectral_centroids))
            
            # Zero crossing rate (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω–æ—Å—Ç—å)
            zcr = librosa.feature.zero_crossing_rate(y_mono)[0]
            avg_zcr = float(np.mean(zcr))
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è
            spectral_bandwidth = librosa.feature.spectral_bandwidth(y=y_mono, sr=sr)[0]
            avg_bandwidth = float(np.mean(spectral_bandwidth))
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            avg_rms = None
            avg_spectral_centroid = None
            avg_zcr = None
            avg_bandwidth = None
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–Ω—Ä–∞
        try:
            print("üéº –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–ª–ª–æ—Ñ—Ñ (—á–∞—Å—Ç–æ—Ç–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 85% —ç–Ω–µ—Ä–≥–∏–∏)
            rolloff = librosa.feature.spectral_rolloff(y=y_mono, sr=sr)[0]
            avg_rolloff = float(np.mean(rolloff))
            
            # MFCC (–º–µ–ª-—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–µ–ø—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)
            mfccs = librosa.feature.mfcc(y=y_mono, sr=sr, n_mfcc=13)
            mfcc_mean = np.mean(mfccs, axis=1)
            
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
            contrast = librosa.feature.spectral_contrast(y=y_mono, sr=sr)
            avg_contrast = float(np.mean(contrast))
            
            # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            freq_balance = analyze_frequency_balance(y_mono, sr)
            
            # –ê–Ω–∞–ª–∏–∑ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            harmonic_complexity = analyze_harmonic_complexity(y_mono, sr)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏
            rhythmic_regularity = analyze_rhythmic_regularity(y_mono, sr)
            
            # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–ª–∏—á–∏—è –≤–æ–∫–∞–ª–∞
            vocal_likelihood = analyze_vocal_presence(y_mono, sr, mfccs)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
            percussive_strength = analyze_percussive_strength(y_mono, sr)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
            synth_presence = analyze_synth_presence(y_mono, sr, mfccs, avg_contrast)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            extended_features = {
                'rolloff': avg_rolloff,
                'mfcc_mean': mfcc_mean,
                'contrast': avg_contrast,
                'bass_emphasis': freq_balance['bass_emphasis'],
                'mid_freq_balance': freq_balance['mid_freq_balance'],
                'high_freq_presence': freq_balance['high_freq_presence'],
                'harmonic_complexity': harmonic_complexity,
                'rhythmic_regularity': rhythmic_regularity,
                'vocal_likelihood': vocal_likelihood,
                'percussive_strength': percussive_strength,
                'synth_presence': synth_presence
            }
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
            extended_features = {
                'rolloff': None,
                'mfcc_mean': None,
                'contrast': None,
                'bass_emphasis': 0.3,
                'mid_freq_balance': 0.4,
                'high_freq_presence': 0.3,
                'harmonic_complexity': 0.5,
                'rhythmic_regularity': 0.7,
                'vocal_likelihood': 0.3,
                'percussive_strength': 0.6,
                'synth_presence': 0.5
            }

        # –ê–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–∞
        print("üé≠ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∂–∞–Ω—Ä...")
        try:
            genre_info = analyze_genre(y_mono, sr, bpm, avg_spectral_centroid, avg_zcr, avg_rms, avg_bandwidth, extended_features)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–Ω—Ä–∞: {e}")
            genre_info = {
                'predicted_genre': 'Unknown',
                'confidence': 0.0,
                'genre_probabilities': {}
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        analysis_result = {
            'success': True,
            'basic_info': {
                'duration': round(duration, 2),
                'sample_rate': int(sr),
                'channels': y.shape[0] if y.ndim == 2 else 1,
                'file_size': file_size,
                'format': audio_format,
                'bit_depth': bit_depth
            },
            'musical_analysis': {
                'bpm': round(bpm, 1) if bpm else None,
                'key_signature': key_signature,
                'tempo_description': get_tempo_description(bpm) if bpm else None,
                'genre': genre_info['predicted_genre'],
                'genre_confidence': genre_info['confidence'],
                'genre_probabilities': genre_info['genre_probabilities']
            },
            'spectral_analysis': {
                'spectrogram': spectrogram_base64,
                'avg_rms': round(avg_rms, 4) if avg_rms else None,
                'spectral_centroid': round(avg_spectral_centroid, 1) if avg_spectral_centroid else None,
                'zero_crossing_rate': round(avg_zcr, 4) if avg_zcr else None,
                'spectral_bandwidth': round(avg_bandwidth, 1) if avg_bandwidth else None
            }
        }
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return analysis_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {e}")
        import traceback
        traceback.print_exc()
        return {
            'success': False,
            'error': str(e)
        }

def analyze_genre(y, sr, bpm, spectral_centroid, zcr, rms, bandwidth, extended_features):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∂–∞–Ω—Ä–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
    """
    # 20 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    electronic_genres = {
        'House': {
            'bpm_range': (120, 130),
            'spectral_centroid_range': (1500, 3000),
            'zcr_range': (0.05, 0.15),
            'rms_range': (0.1, 0.3),
            'bandwidth_range': (1000, 2500),
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            'bass_emphasis': (0.15, 0.35),  # –°–∏–ª—å–Ω—ã–π –±–∞—Å, –Ω–æ –Ω–µ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π
            'mid_freq_balance': (0.25, 0.45),  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã
            'high_freq_presence': (0.20, 0.40),  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
            'harmonic_complexity': (0.3, 0.6),  # –°—Ä–µ–¥–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            'rhythmic_regularity': (0.7, 0.9),  # –û—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∏—Ç–º
            'vocal_likelihood': (0.2, 0.7),  # –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–æ–∫–∞–ª
            'percussive_strength': (0.6, 0.8),  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.5, 0.8)  # –ó–∞–º–µ—Ç–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        },
        'Techno': {
            'bpm_range': (120, 150),
            'spectral_centroid_range': (2000, 4000),
            'zcr_range': (0.08, 0.20),
            'rms_range': (0.15, 0.35),
            'bandwidth_range': (1500, 3000),
            'bass_emphasis': (0.25, 0.45),
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.35, 0.55),
            'harmonic_complexity': (0.2, 0.5),  # –ú–µ–Ω–µ–µ —Å–ª–æ–∂–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.8, 0.95),  # –û—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∏—Ç–º
            'vocal_likelihood': (0.0, 0.3),  # –†–µ–¥–∫–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.7, 0.9),  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.6, 0.9)  # –°–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        },
        'Trance': {
            'bpm_range': (125, 140),
            'spectral_centroid_range': (2500, 5000),
            'zcr_range': (0.06, 0.16),
            'rms_range': (0.12, 0.30),
            'bandwidth_range': (2000, 4000),
            'bass_emphasis': (0.20, 0.40),
            'mid_freq_balance': (0.35, 0.55),
            'high_freq_presence': (0.40, 0.70),  # –Ø—Ä–∫–∏–µ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
            'harmonic_complexity': (0.4, 0.7),  # –°–ª–æ–∂–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.7, 0.9),
            'vocal_likelihood': (0.3, 0.8),  # –ß–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.5, 0.7),
            'synth_presence': (0.7, 0.95)  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        },
        'Dubstep': {
            'bpm_range': (135, 145),
            'spectral_centroid_range': (1000, 3500),
            'zcr_range': (0.10, 0.25),
            'rms_range': (0.20, 0.45),
            'bandwidth_range': (1500, 4000),
            'bass_emphasis': (0.40, 0.70),  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –±–∞—Å
            'mid_freq_balance': (0.20, 0.40),
            'high_freq_presence': (0.25, 0.50),
            'harmonic_complexity': (0.3, 0.6),
            'rhythmic_regularity': (0.4, 0.7),  # –ú–µ–Ω–µ–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∏—Ç–º
            'vocal_likelihood': (0.2, 0.6),
            'percussive_strength': (0.6, 0.8),
            'synth_presence': (0.6, 0.9)
        },
        'Drum and Bass': {
            'bpm_range': (160, 180),
            'spectral_centroid_range': (2000, 5000),
            'zcr_range': (0.15, 0.30),
            'rms_range': (0.18, 0.40),
            'bandwidth_range': (2500, 5000),
            'bass_emphasis': (0.35, 0.60),  # –°–∏–ª—å–Ω—ã–π –±–∞—Å
            'mid_freq_balance': (0.25, 0.45),
            'high_freq_presence': (0.30, 0.60),
            'harmonic_complexity': (0.3, 0.6),
            'rhythmic_regularity': (0.5, 0.8),  # –°–ª–æ–∂–Ω—ã–µ —Ä–∏—Ç–º—ã
            'vocal_likelihood': (0.1, 0.5),
            'percussive_strength': (0.8, 0.95),  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.4, 0.7)
        },
        'Ambient': {
            'bpm_range': (60, 90),
            'spectral_centroid_range': (800, 2000),
            'zcr_range': (0.02, 0.08),
            'rms_range': (0.05, 0.15),
            'bandwidth_range': (500, 1500),
            'bass_emphasis': (0.10, 0.30),  # –ú—è–≥–∫–∏–π –±–∞—Å
            'mid_freq_balance': (0.30, 0.60),
            'high_freq_presence': (0.20, 0.50),
            'harmonic_complexity': (0.5, 0.8),  # –°–ª–æ–∂–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.2, 0.5),  # –°–ª–∞–±—ã–π —Ä–∏—Ç–º
            'vocal_likelihood': (0.1, 0.4),
            'percussive_strength': (0.1, 0.3),  # –°–ª–∞–±–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.6, 0.9)  # –ú–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä
        },
        'Breakbeat': {
            'bpm_range': (120, 140),
            'spectral_centroid_range': (1500, 3500),
            'zcr_range': (0.12, 0.25),
            'rms_range': (0.15, 0.35),
            'bandwidth_range': (1800, 3500),
            'bass_emphasis': (0.25, 0.45),
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.25, 0.45),
            'harmonic_complexity': (0.3, 0.6),
            'rhythmic_regularity': (0.3, 0.6),  # –ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∏—Ç–º—ã
            'vocal_likelihood': (0.2, 0.6),
            'percussive_strength': (0.7, 0.9),  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.4, 0.7)
        },
        'Electro': {
            'bpm_range': (110, 130),
            'spectral_centroid_range': (1800, 4000),
            'zcr_range': (0.08, 0.18),
            'rms_range': (0.12, 0.28),
            'bandwidth_range': (1500, 3000),
            'bass_emphasis': (0.30, 0.50),
            'mid_freq_balance': (0.25, 0.45),
            'high_freq_presence': (0.30, 0.55),
            'harmonic_complexity': (0.2, 0.5),
            'rhythmic_regularity': (0.6, 0.8),
            'vocal_likelihood': (0.1, 0.4),
            'percussive_strength': (0.6, 0.8),
            'synth_presence': (0.7, 0.9)  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–æ-—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
        },
        'Progressive House': {
            'bpm_range': (120, 130),
            'spectral_centroid_range': (2000, 4500),
            'zcr_range': (0.06, 0.14),
            'rms_range': (0.10, 0.25),
            'bandwidth_range': (1800, 3500),
            'bass_emphasis': (0.20, 0.40),
            'mid_freq_balance': (0.35, 0.55),
            'high_freq_presence': (0.35, 0.60),
            'harmonic_complexity': (0.5, 0.8),  # –°–ª–æ–∂–Ω–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.6, 0.8),
            'vocal_likelihood': (0.3, 0.7),
            'percussive_strength': (0.5, 0.7),
            'synth_presence': (0.6, 0.9)
        },
        'Deep House': {
            'bpm_range': (115, 125),
            'spectral_centroid_range': (1200, 2500),
            'zcr_range': (0.04, 0.12),
            'rms_range': (0.08, 0.22),
            'bandwidth_range': (1000, 2200),
            'bass_emphasis': (0.25, 0.50),  # –ì–ª—É–±–æ–∫–∏–π –±–∞—Å
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.15, 0.35),  # –ü—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ –≤—ã—Å–æ–∫–∏–µ
            'harmonic_complexity': (0.4, 0.7),
            'rhythmic_regularity': (0.7, 0.9),
            'vocal_likelihood': (0.4, 0.8),  # –ß–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.4, 0.6),  # –ú—è–≥–∫–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.5, 0.8)
        },
        'Trap': {
            'bpm_range': (130, 170),
            'spectral_centroid_range': (1500, 4000),
            'zcr_range': (0.10, 0.22),
            'rms_range': (0.15, 0.35),
            'bandwidth_range': (1800, 4000),
            'bass_emphasis': (0.35, 0.65),  # –°–∏–ª—å–Ω—ã–π 808 –±–∞—Å
            'mid_freq_balance': (0.20, 0.40),
            'high_freq_presence': (0.30, 0.55),
            'harmonic_complexity': (0.2, 0.5),
            'rhythmic_regularity': (0.5, 0.7),
            'vocal_likelihood': (0.3, 0.8),  # –ß–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä—ç–ø
            'percussive_strength': (0.7, 0.9),  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ trap —Ö—ç—Ç—ã
            'synth_presence': (0.4, 0.7)
        },
        'Future Bass': {
            'bpm_range': (130, 160),
            'spectral_centroid_range': (2500, 6000),
            'zcr_range': (0.08, 0.18),
            'rms_range': (0.12, 0.30),
            'bandwidth_range': (2000, 5000),
            'bass_emphasis': (0.25, 0.50),
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.40, 0.70),  # –Ø—Ä–∫–∏–µ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
            'harmonic_complexity': (0.4, 0.7),
            'rhythmic_regularity': (0.5, 0.7),
            'vocal_likelihood': (0.4, 0.8),  # –ß–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.5, 0.7),
            'synth_presence': (0.7, 0.95)  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ future bass —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
        },
        'Hardstyle': {
            'bpm_range': (140, 160),
            'spectral_centroid_range': (2000, 5000),
            'zcr_range': (0.12, 0.25),
            'rms_range': (0.20, 0.40),
            'bandwidth_range': (2500, 5000),
            'bass_emphasis': (0.30, 0.55),
            'mid_freq_balance': (0.25, 0.45),
            'high_freq_presence': (0.35, 0.65),
            'harmonic_complexity': (0.2, 0.5),
            'rhythmic_regularity': (0.8, 0.95),  # –û—á–µ–Ω—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–∏—Ç–º
            'vocal_likelihood': (0.2, 0.6),
            'percussive_strength': (0.8, 0.95),  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π hardstyle kick
            'synth_presence': (0.6, 0.9)
        },
        'Minimal': {
            'bpm_range': (120, 135),
            'spectral_centroid_range': (1000, 2500),
            'zcr_range': (0.04, 0.12),
            'rms_range': (0.08, 0.20),
            'bandwidth_range': (800, 2000),
            'bass_emphasis': (0.20, 0.40),
            'mid_freq_balance': (0.25, 0.45),
            'high_freq_presence': (0.15, 0.35),
            'harmonic_complexity': (0.2, 0.4),  # –ü—Ä–æ—Å—Ç–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.7, 0.9),
            'vocal_likelihood': (0.0, 0.3),  # –†–µ–¥–∫–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.5, 0.7),
            'synth_presence': (0.3, 0.6)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        },
        'Garage': {
            'bpm_range': (125, 140),
            'spectral_centroid_range': (1500, 3500),
            'zcr_range': (0.10, 0.20),
            'rms_range': (0.12, 0.28),
            'bandwidth_range': (1500, 3000),
            'bass_emphasis': (0.25, 0.45),
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.25, 0.45),
            'harmonic_complexity': (0.3, 0.6),
            'rhythmic_regularity': (0.4, 0.7),  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ garage —Ä–∏—Ç–º—ã
            'vocal_likelihood': (0.3, 0.7),
            'percussive_strength': (0.6, 0.8),
            'synth_presence': (0.4, 0.7)
        },
        'IDM': {
            'bpm_range': (80, 160),
            'spectral_centroid_range': (1500, 4500),
            'zcr_range': (0.08, 0.25),
            'rms_range': (0.10, 0.30),
            'bandwidth_range': (1500, 4000),
            'bass_emphasis': (0.15, 0.45),
            'mid_freq_balance': (0.25, 0.55),
            'high_freq_presence': (0.30, 0.60),
            'harmonic_complexity': (0.6, 0.9),  # –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è
            'rhythmic_regularity': (0.2, 0.5),  # –ù–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–∏—Ç–º—ã
            'vocal_likelihood': (0.1, 0.4),
            'percussive_strength': (0.3, 0.7),
            'synth_presence': (0.5, 0.8)
        },
        'Psytrance': {
            'bpm_range': (140, 150),
            'spectral_centroid_range': (2500, 6000),
            'zcr_range': (0.10, 0.20),
            'rms_range': (0.15, 0.35),
            'bandwidth_range': (2500, 5500),
            'bass_emphasis': (0.25, 0.45),
            'mid_freq_balance': (0.30, 0.50),
            'high_freq_presence': (0.40, 0.70),
            'harmonic_complexity': (0.4, 0.7),
            'rhythmic_regularity': (0.7, 0.9),
            'vocal_likelihood': (0.0, 0.2),  # –†–µ–¥–∫–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–∫–∞–ª
            'percussive_strength': (0.6, 0.8),
            'synth_presence': (0.8, 0.95)  # –û—á–µ–Ω—å –º–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        },
        'Synthwave': {
            'bpm_range': (100, 120),
            'spectral_centroid_range': (1500, 3500),
            'zcr_range': (0.05, 0.15),
            'rms_range': (0.10, 0.25),
            'bandwidth_range': (1200, 2800),
            'bass_emphasis': (0.20, 0.40),
            'mid_freq_balance': (0.35, 0.55),
            'high_freq_presence': (0.25, 0.50),
            'harmonic_complexity': (0.4, 0.7),
            'rhythmic_regularity': (0.6, 0.8),
            'vocal_likelihood': (0.2, 0.6),
            'percussive_strength': (0.4, 0.6),
            'synth_presence': (0.8, 0.95)  # –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ä–µ—Ç—Ä–æ-—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
        },
        'Chillout': {
            'bpm_range': (80, 110),
            'spectral_centroid_range': (1000, 2500),
            'zcr_range': (0.03, 0.10),
            'rms_range': (0.06, 0.18),
            'bandwidth_range': (800, 2000),
            'bass_emphasis': (0.15, 0.35),
            'mid_freq_balance': (0.35, 0.60),
            'high_freq_presence': (0.20, 0.45),
            'harmonic_complexity': (0.4, 0.7),
            'rhythmic_regularity': (0.4, 0.7),
            'vocal_likelihood': (0.3, 0.7),
            'percussive_strength': (0.2, 0.4),  # –ú—è–≥–∫–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è
            'synth_presence': (0.5, 0.8)
        },
        'Bass Music': {
            'bpm_range': (130, 150),
            'spectral_centroid_range': (800, 2500),
            'zcr_range': (0.08, 0.20),
            'rms_range': (0.18, 0.40),
            'bandwidth_range': (1000, 3000),
            'bass_emphasis': (0.50, 0.80),  # –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –±–∞—Å
            'mid_freq_balance': (0.15, 0.35),
            'high_freq_presence': (0.20, 0.40),
            'harmonic_complexity': (0.2, 0.5),
            'rhythmic_regularity': (0.5, 0.7),
            'vocal_likelihood': (0.2, 0.6),
            'percussive_strength': (0.6, 0.8),
            'synth_presence': (0.6, 0.9)  # –ë–∞—Å–æ–≤—ã–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã
        }
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∂–∞–Ω—Ä–∞
    try:
        print("üéº –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏...")
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–æ–ª–ª–æ—Ñ—Ñ (—á–∞—Å—Ç–æ—Ç–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è 85% —ç–Ω–µ—Ä–≥–∏–∏)
        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)[0]
        avg_rolloff = float(np.mean(rolloff))
        
        # MFCC (–º–µ–ª-—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–µ–ø—Å—Ç—Ä–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã)
        mfccs = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)
        mfcc_mean = np.mean(mfccs, axis=1)
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        contrast = librosa.feature.spectral_contrast(y=y, sr=sr)
        avg_contrast = float(np.mean(contrast))
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        freq_balance = analyze_frequency_balance(y, sr)
        
        # –ê–Ω–∞–ª–∏–∑ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        harmonic_complexity = analyze_harmonic_complexity(y, sr)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        rhythmic_regularity = analyze_rhythmic_regularity(y, sr)
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–ª–∏—á–∏—è –≤–æ–∫–∞–ª–∞
        vocal_likelihood = analyze_vocal_presence(y, sr, mfccs)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
        percussive_strength = analyze_percussive_strength(y, sr)
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
        synth_presence = analyze_synth_presence(y, sr, mfccs, avg_contrast)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        extended_features = {
            'rolloff': avg_rolloff,
            'mfcc_mean': mfcc_mean,
            'contrast': avg_contrast,
            'bass_emphasis': freq_balance['bass_emphasis'],
            'mid_freq_balance': freq_balance['mid_freq_balance'],
            'high_freq_presence': freq_balance['high_freq_presence'],
            'harmonic_complexity': harmonic_complexity,
            'rhythmic_regularity': rhythmic_regularity,
            'vocal_likelihood': vocal_likelihood,
            'percussive_strength': percussive_strength,
            'synth_presence': synth_presence
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {e}")
        extended_features = {
            'rolloff': None,
            'mfcc_mean': None,
            'contrast': None,
            'bass_emphasis': 0.3,
            'mid_freq_balance': 0.4,
            'high_freq_presence': 0.3,
            'harmonic_complexity': 0.5,
            'rhythmic_regularity': 0.7,
            'vocal_likelihood': 0.3,
            'percussive_strength': 0.6,
            'synth_presence': 0.5
        }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
    genre_scores = {}
    
    for genre, characteristics in electronic_genres.items():
        score = 0.0
        total_weight = 0.0
        
        # BPM (–≤–µ—Å 0.3)
        if bpm is not None:
            bpm_min, bpm_max = characteristics['bpm_range']
            if bpm_min <= bpm <= bpm_max:
                score += 0.3
            else:
                # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                deviation = min(abs(bpm - bpm_min), abs(bpm - bpm_max))
                penalty = max(0, 0.3 - deviation / 50.0)  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ç—Ä–∞—Ñ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ
                score += penalty
            total_weight += 0.3
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ (–≤–µ—Å 0.25)
        if spectral_centroid is not None:
            sc_min, sc_max = characteristics['spectral_centroid_range']
            if sc_min <= spectral_centroid <= sc_max:
                score += 0.25
            else:
                deviation = min(abs(spectral_centroid - sc_min), abs(spectral_centroid - sc_max))
                penalty = max(0, 0.25 - deviation / 2000.0)
                score += penalty
            total_weight += 0.25
        
        # Zero Crossing Rate (–≤–µ—Å 0.2)
        if zcr is not None:
            zcr_min, zcr_max = characteristics['zcr_range']
            if zcr_min <= zcr <= zcr_max:
                score += 0.2
            else:
                deviation = min(abs(zcr - zcr_min), abs(zcr - zcr_max))
                penalty = max(0, 0.2 - deviation / 0.1)
                score += penalty
            total_weight += 0.2
        
        # RMS —ç–Ω–µ—Ä–≥–∏—è (–≤–µ—Å 0.15)
        if rms is not None:
            rms_min, rms_max = characteristics['rms_range']
            if rms_min <= rms <= rms_max:
                score += 0.15
            else:
                deviation = min(abs(rms - rms_min), abs(rms - rms_max))
                penalty = max(0, 0.15 - deviation / 0.2)
                score += penalty
            total_weight += 0.15
        
        # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–∏—è (–≤–µ—Å 0.1)
        if bandwidth is not None:
            bw_min, bw_max = characteristics['bandwidth_range']
            if bw_min <= bandwidth <= bw_max:
                score += 0.1
            else:
                deviation = min(abs(bandwidth - bw_min), abs(bandwidth - bw_max))
                penalty = max(0, 0.1 - deviation / 1500.0)
                score += penalty
            total_weight += 0.1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å –º–µ–Ω—å—à–∏–º–∏ –≤–µ—Å–∞–º–∏
        
        # –ë–∞–ª–∞–Ω—Å —á–∞—Å—Ç–æ—Ç (–≤–µ—Å 0.05)
        if extended_features['bass_emphasis'] is not None:
            bass_min, bass_max = characteristics['bass_emphasis']
            if bass_min <= extended_features['bass_emphasis'] <= bass_max:
                score += 0.05
            else:
                deviation = min(abs(extended_features['bass_emphasis'] - bass_min), 
                              abs(extended_features['bass_emphasis'] - bass_max))
                penalty = max(0, 0.05 - deviation / 0.5)
                score += penalty
            total_weight += 0.05
        
        # –ì–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–≤–µ—Å 0.04)
        if extended_features['harmonic_complexity'] is not None:
            harm_min, harm_max = characteristics['harmonic_complexity']
            if harm_min <= extended_features['harmonic_complexity'] <= harm_max:
                score += 0.04
            else:
                deviation = min(abs(extended_features['harmonic_complexity'] - harm_min),
                              abs(extended_features['harmonic_complexity'] - harm_max))
                penalty = max(0, 0.04 - deviation / 0.5)
                score += penalty
            total_weight += 0.04
        
        # –†–∏—Ç–º–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (–≤–µ—Å 0.04)
        if extended_features['rhythmic_regularity'] is not None:
            rhythm_min, rhythm_max = characteristics['rhythmic_regularity']
            if rhythm_min <= extended_features['rhythmic_regularity'] <= rhythm_max:
                score += 0.04
            else:
                deviation = min(abs(extended_features['rhythmic_regularity'] - rhythm_min),
                              abs(extended_features['rhythmic_regularity'] - rhythm_max))
                penalty = max(0, 0.04 - deviation / 0.5)
                score += penalty
            total_weight += 0.04
        
        # –í–æ–∫–∞–ª—å–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ (–≤–µ—Å 0.03)
        if extended_features['vocal_likelihood'] is not None:
            vocal_min, vocal_max = characteristics['vocal_likelihood']
            if vocal_min <= extended_features['vocal_likelihood'] <= vocal_max:
                score += 0.03
            else:
                deviation = min(abs(extended_features['vocal_likelihood'] - vocal_min),
                              abs(extended_features['vocal_likelihood'] - vocal_max))
                penalty = max(0, 0.03 - deviation / 0.5)
                score += penalty
            total_weight += 0.03
        
        # –ü–µ—Ä–∫—É—Å—Å–∏–≤–Ω–∞—è —Å–∏–ª–∞ (–≤–µ—Å 0.03)
        if extended_features['percussive_strength'] is not None:
            perc_min, perc_max = characteristics['percussive_strength']
            if perc_min <= extended_features['percussive_strength'] <= perc_max:
                score += 0.03
            else:
                deviation = min(abs(extended_features['percussive_strength'] - perc_min),
                              abs(extended_features['percussive_strength'] - perc_max))
                penalty = max(0, 0.03 - deviation / 0.5)
                score += penalty
            total_weight += 0.03
        
        # –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤ (–≤–µ—Å 0.03)
        if extended_features['synth_presence'] is not None:
            synth_min, synth_max = characteristics['synth_presence']
            if synth_min <= extended_features['synth_presence'] <= synth_max:
                score += 0.03
            else:
                deviation = min(abs(extended_features['synth_presence'] - synth_min),
                              abs(extended_features['synth_presence'] - synth_max))
                penalty = max(0, 0.03 - deviation / 0.5)
                score += penalty
            total_weight += 0.03
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—á–µ—Ç
        if total_weight > 0:
            genre_scores[genre] = score / total_weight
        else:
            genre_scores[genre] = 0.0
    
    # –ù–∞—Ö–æ–¥–∏–º –∂–∞–Ω—Ä —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Å—á–µ—Ç–æ–º
    if genre_scores:
        predicted_genre = max(genre_scores, key=genre_scores.get)
        confidence = genre_scores[predicted_genre]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∂–∞–Ω—Ä—ã –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        sorted_genres = dict(sorted(genre_scores.items(), key=lambda x: x[1], reverse=True))
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –∂–∞–Ω—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        top_genres = dict(list(sorted_genres.items())[:5])
        
        return {
            'predicted_genre': predicted_genre,
            'confidence': round(confidence * 100, 1),  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            'genre_probabilities': {k: round(v * 100, 1) for k, v in top_genres.items()}
        }
    else:
        return {
            'predicted_genre': 'Unknown',
            'confidence': 0.0,
            'genre_probabilities': {}
        }

def analyze_frequency_balance(y, sr):
    """
    –ê–Ω–∞–ª–∏–∑ –±–∞–ª–∞–Ω—Å–∞ —á–∞—Å—Ç–æ—Ç: –±–∞—Å, —Å—Ä–µ–¥–Ω–∏–µ –∏ –≤—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ø–µ–∫—Ç—Ä
        D = librosa.stft(y)
        magnitude = np.abs(D)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        freqs = librosa.fft_frequencies(sr=sr)
        
        # –ë–∞—Å–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã (20-250 Hz)
        bass_mask = (freqs >= 20) & (freqs <= 250)
        bass_energy = np.mean(magnitude[bass_mask, :])
        
        # –°—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã (250-4000 Hz)
        mid_mask = (freqs >= 250) & (freqs <= 4000)
        mid_energy = np.mean(magnitude[mid_mask, :])
        
        # –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã (4000-20000 Hz)
        high_mask = (freqs >= 4000) & (freqs <= 20000)
        high_energy = np.mean(magnitude[high_mask, :])
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–±—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏
        total_energy = bass_energy + mid_energy + high_energy
        
        if total_energy > 0:
            bass_emphasis = bass_energy / total_energy
            mid_freq_balance = mid_energy / total_energy
            high_freq_presence = high_energy / total_energy
        else:
            bass_emphasis = 0.33
            mid_freq_balance = 0.33
            high_freq_presence = 0.33
        
        return {
            'bass_emphasis': float(bass_emphasis),
            'mid_freq_balance': float(mid_freq_balance),
            'high_freq_presence': float(high_freq_presence)
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return {
            'bass_emphasis': 0.33,
            'mid_freq_balance': 0.33,
            'high_freq_presence': 0.33
        }

def analyze_harmonic_complexity(y, sr):
    """
    –ê–Ω–∞–ª–∏–∑ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ chroma –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        # Chroma features –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–∞—Ä–º–æ–Ω–∏–∏
        chroma = librosa.feature.chroma_stft(y=y, sr=sr)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ chroma (–ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
        chroma_std = np.std(chroma, axis=1)
        avg_chroma_complexity = np.mean(chroma_std)
        
        # –¢–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (–Ω–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
        chroma_var = np.var(chroma, axis=1)
        tonal_stability = 1.0 - np.mean(chroma_var)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        harmonic_complexity = (avg_chroma_complexity + (1.0 - tonal_stability)) / 2.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω 0-1
        harmonic_complexity = np.clip(harmonic_complexity, 0.0, 1.0)
        
        return float(harmonic_complexity)
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {e}")
        return 0.5

def analyze_rhythmic_regularity(y, sr):
    """
    –ê–Ω–∞–ª–∏–∑ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ onset detection –∏ beat tracking
    """
    try:
        # –î–µ—Ç–µ–∫—Ü–∏—è onset'–æ–≤ (–Ω–∞—á–∞–ª –Ω–æ—Ç/—É–¥–∞—Ä–æ–≤)
        onset_frames = librosa.onset.onset_detect(y=y, sr=sr)
        onset_times = librosa.frames_to_time(onset_frames, sr=sr)
        
        if len(onset_times) < 3:
            return 0.5  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É onset'–∞–º–∏
        intervals = np.diff(onset_times)
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å = –æ–±—Ä–∞—Ç–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        if len(intervals) > 1:
            interval_std = np.std(intervals)
            mean_interval = np.mean(intervals)
            
            if mean_interval > 0:
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (CV)
                cv = interval_std / mean_interval
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (0-1)
                regularity = 1.0 / (1.0 + cv)
            else:
                regularity = 0.5
        else:
            regularity = 0.5
        
        return float(np.clip(regularity, 0.0, 1.0))
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏: {e}")
        return 0.7

def analyze_vocal_presence(y, sr, mfccs):
    """
    –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–ª–∏—á–∏—è –≤–æ–∫–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ MFCC –∏ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    """
    try:
        # MFCC —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Ç–∏–ø–∏—á–Ω—ã–µ –¥–ª—è –≤–æ–∫–∞–ª–∞
        # –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ MFCC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞–Ω—Ç–∞—Ö
        if mfccs is not None and len(mfccs) >= 4:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 4 MFCC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
            mfcc_vocal_indicators = mfccs[1:4]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π (—ç–Ω–µ—Ä–≥–∏—è)
            
            # –í–æ–∫–∞–ª –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è MFCC
            vocal_score = 0.0
            
            # MFCC1: –æ–±—ã—á–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -50 –¥–æ 50 –¥–ª—è –≤–æ–∫–∞–ª–∞
            if -50 <= mfcc_vocal_indicators[0] <= 50:
                vocal_score += 0.3
            
            # MFCC2: –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ñ–æ—Ä–º–∞–Ω—Ç–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            mfcc2_var = np.var(mfccs[2])
            if 10 <= mfcc2_var <= 100:
                vocal_score += 0.3
            
            # MFCC3: —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞–Ω —Å —Ñ–æ—Ä–º–∞–Ω—Ç–∞–º–∏
            mfcc3_mean = np.mean(mfccs[3])
            if -30 <= mfcc3_mean <= 30:
                vocal_score += 0.2
        else:
            vocal_score = 0.3
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        try:
            # –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞
            spectral_centroids = librosa.feature.spectral_centroid(y=y, sr=sr)[0]
            avg_centroid = np.mean(spectral_centroids)
            
            # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å –æ–±—ã—á–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 500-4000 Hz
            if 500 <= avg_centroid <= 4000:
                vocal_score += 0.2
            
        except:
            pass
        
        return float(np.clip(vocal_score, 0.0, 1.0))
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: {e}")
        return 0.3

def analyze_percussive_strength(y, sr):
    """
    –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—ã –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≥–∞—Ä–º–æ–Ω–∏—á–µ—Å–∫–∏–µ –∏ –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        y_harmonic, y_percussive = librosa.effects.hpss(y)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        percussive_energy = np.mean(y_percussive ** 2)
        total_energy = np.mean(y ** 2)
        
        if total_energy > 0:
            percussive_ratio = percussive_energy / total_energy
        else:
            percussive_ratio = 0.5
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º onset strength
        try:
            onset_strength = librosa.onset.onset_strength(y=y, sr=sr)
            avg_onset_strength = np.mean(onset_strength)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω—ã–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º
            normalized_onset = np.clip(avg_onset_strength / 10.0, 0.0, 1.0)
            percussive_strength = (percussive_ratio + normalized_onset) / 2.0
        except:
            percussive_strength = percussive_ratio
        
        return float(np.clip(percussive_strength, 0.0, 1.0))
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–∫—É—Å—Å–∏–≤–Ω–æ–π —Å–∏–ª—ã: {e}")
        return 0.6

def analyze_synth_presence(y, sr, mfccs, spectral_contrast):
    """
    –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    """
    try:
        synth_score = 0.0
        
        # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
        if spectral_contrast is not None:
            if spectral_contrast > 15:  # –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç
                synth_score += 0.3
            elif spectral_contrast > 10:
                synth_score += 0.2
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ä–æ–ª–ª–æ—Ñ—Ñ–∞
        try:
            rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)[0]
            avg_rolloff = np.mean(rolloff)
            
            # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —á–∞—Å—Ç–æ—Ç–Ω—ã–π —Å–ø–µ–∫—Ç—Ä
            if avg_rolloff > 8000:  # –í—ã—Å–æ–∫–∏–µ —á–∞—Å—Ç–æ—Ç—ã
                synth_score += 0.2
        except:
            pass
        
        # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (flatness)
        try:
            spectral_flatness = librosa.feature.spectral_flatness(y=y)[0]
            avg_flatness = np.mean(spectral_flatness)
            
            # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å –±–æ–ª–µ–µ "–ø–ª–æ—Å–∫–∏–π" —Å–ø–µ–∫—Ç—Ä
            if avg_flatness > 0.1:
                synth_score += 0.2
        except:
            pass
        
        # MFCC –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–≤—É–∫–æ–≤
        if mfccs is not None and len(mfccs) >= 6:
            # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã —á–∞—Å—Ç–æ –∏–º–µ—é—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ MFCC –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            mfcc_variance = np.var(mfccs[4:6], axis=1)
            avg_mfcc_var = np.mean(mfcc_variance)
            
            if avg_mfcc_var > 50:  # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                synth_score += 0.2
        
        # –ê–Ω–∞–ª–∏–∑ zero crossing rate (—É–∂–µ –µ—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö)
        try:
            zcr = librosa.feature.zero_crossing_rate(y)[0]
            avg_zcr = np.mean(zcr)
            
            # –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ ZCR –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if 0.05 <= avg_zcr <= 0.3:
                synth_score += 0.1
        except:
            pass
        
        return float(np.clip(synth_score, 0.0, 1.0))
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤: {e}")
        return 0.5

def get_tempo_description(bpm):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ BPM
    """
    if bpm is None:
        return None
    
    if bpm < 60:
        return "–û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ (Largo)"
    elif bpm < 76:
        return "–ú–µ–¥–ª–µ–Ω–Ω–æ (Adagio)"
    elif bpm < 108:
        return "–£–º–µ—Ä–µ–Ω–Ω–æ (Andante)"
    elif bpm < 120:
        return "–£–º–µ—Ä–µ–Ω–Ω–æ –±—ã—Å—Ç—Ä–æ (Moderato)"
    elif bpm < 168:
        return "–ë—ã—Å—Ç—Ä–æ (Allegro)"
    elif bpm < 200:
        return "–û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (Presto)"
    else:
        return "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –±—ã—Å—Ç—Ä–æ (Prestissimo)"

@app.route('/analyze', methods=['POST'])
def analyze_audio():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
    """
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        if file.filename == '':
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        allowed_extensions = {'.mp3', '.wav', '.flac', '.m4a', '.aac'}
        _, ext = os.path.splitext(file.filename.lower())
        if ext not in allowed_extensions:
            return jsonify({'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        temp_dir = tempfile.mkdtemp()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            input_path = os.path.join(temp_dir, file.filename)
            file.save(input_path)
            
            print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file.filename}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª
            analysis_result = analyze_audio_file(input_path)
            
            return jsonify(analysis_result)
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

if __name__ == '__main__':
    print("üéµ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ...")
    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   1. Rubber Band (–ª—É—á—à–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞)")
    print("   2. Librosa Phase Vocoder (fallback)")
    print("   3. –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)")
    print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5230")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π Flask —Å–µ—Ä–≤–µ—Ä
    app.run(debug=True, host='0.0.0.0', port=5230)
