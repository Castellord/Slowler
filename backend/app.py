import os
import tempfile
import zipfile
from flask import Flask, request, jsonify, send_file, Response
from flask_cors import CORS
from flask_socketio import SocketIO, emit, join_room, leave_room
import json
import threading
import queue
import librosa
import numpy as np
from scipy import signal
import io
import warnings
warnings.filterwarnings('ignore')

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    import soundfile as sf
    HAS_SOUNDFILE = True
    print("‚úÖ soundfile –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    HAS_SOUNDFILE = False
    print("‚ö†Ô∏è  soundfile –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º scipy –¥–ª—è –∑–∞–ø–∏—Å–∏")

try:
    import pyrubberband as pyrb
    HAS_RUBBERBAND = True
    print("‚úÖ pyrubberband –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    HAS_RUBBERBAND = False
    print("‚ö†Ô∏è  pyrubberband –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º librosa")

app = Flask(__name__)
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SocketIO
socketio = SocketIO(app, cors_allowed_origins="*", async_mode='eventlet')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB max file size
UPLOAD_FOLDER = tempfile.mkdtemp()
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_storage = {}

def send_progress(session_id, file_index, total_files, step, message, progress_type='info'):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ WebSocket –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–ª—è fallback"""
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {message}")
    
    progress_data = {
        'file_index': file_index,
        'total_files': total_files,
        'step': step,
        'message': message,
        'type': progress_type,
        'timestamp': threading.current_thread().ident,
        'time': str(threading.current_thread().ident)
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket
    try:
        socketio.emit('progress_update', progress_data, room=session_id)
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        socketio.sleep(0)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç eventlet –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"üì° WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {session_id}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∫ fallback
    if session_id not in progress_storage:
        progress_storage[session_id] = []
    
    progress_storage[session_id].append(progress_data)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)
    if len(progress_storage[session_id]) > 50:
        progress_storage[session_id] = progress_storage[session_id][-50:]
    
    print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {session_id}: {len(progress_storage[session_id])} –∑–∞–ø–∏—Å–µ–π")

def process_audio_with_rubberband(audio_path, speed_factor, preserve_pitch=True):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É—á—à–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        wav_path = convert_to_wav_if_needed(audio_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Rubber Band –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if HAS_RUBBERBAND:
            try:
                print(f"üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º Rubber Band —Å —Ñ–∞–π–ª–æ–º: {wav_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π
                if not os.path.exists(wav_path):
                    raise Exception(f"WAV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {wav_path}")
                
                file_size = os.path.getsize(wav_path)
                if file_size < 1000:
                    raise Exception(f"WAV —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π: {file_size} –±–∞–π—Ç")
                
                print(f"üìä –†–∞–∑–º–µ—Ä WAV —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º pyrubberband —Å —Ñ–∞–π–ª–æ–º –Ω–∞–ø—Ä—è–º—É—é
                import subprocess
                import tempfile
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                temp_fd, temp_output = tempfile.mkstemp(suffix='.wav')
                os.close(temp_fd)
                
                try:
                    if preserve_pitch:
                        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                        cmd = [
                            'rubberband',
                            '--time', str(1.0 / speed_factor),
                            '--pitch-hq',
                            wav_path,
                            temp_output
                        ]
                    else:
                        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        cmd = [
                            'rubberband',
                            '--speed', str(speed_factor),
                            wav_path,
                            temp_output
                        ]
                    
                    print(f"üîß –ö–æ–º–∞–Ω–¥–∞ Rubber Band: {' '.join(cmd)}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
                    result = subprocess.run(cmd, capture_output=True, text=True)
                    
                    if result.returncode == 0:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        processed_y, processed_sr = load_audio_with_scipy(temp_output)
                        
                        print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Rubber Band –∞–ª–≥–æ—Ä–∏—Ç–º")
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                        try:
                            os.unlink(temp_output)
                            if wav_path != audio_path:
                                os.unlink(wav_path)
                        except:
                            pass
                        
                        return processed_y, processed_sr
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã Rubber Band: {result.stderr}")
                        raise Exception(f"Rubber Band –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}")
                
                except Exception as e:
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        os.unlink(temp_output)
                    except:
                        pass
                    raise e
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Rubber Band: {e}")
                print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Custom STFT –∞–ª–≥–æ—Ä–∏—Ç–º")
        
        # Fallback –Ω–∞ –Ω–∞—à–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
        return process_audio_with_librosa(wav_path, speed_factor, preserve_pitch)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback
        return process_audio_with_librosa(audio_path, speed_factor, preserve_pitch)

def convert_to_wav_if_needed(audio_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MP3 –≤ WAV –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    import os
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    _, ext = os.path.splitext(audio_path.lower())
    
    if ext == '.wav':
        print(f"üìÅ –§–∞–π–ª —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV: {audio_path}")
        return audio_path
    
    elif ext == '.mp3':
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 –≤ WAV: {audio_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è WAV —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
        base_name = os.path.splitext(os.path.basename(audio_path))[0]
        wav_filename = f"{base_name}_converted.wav"
        wav_path = os.path.join(os.path.dirname(audio_path), wav_filename)
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ pydub
            from pydub import AudioSegment
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3
            audio = AudioSegment.from_mp3(audio_path)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ WAV –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
            audio.export(
                wav_path,
                format="wav",
                parameters=[
                    "-acodec", "pcm_s16le",  # 16-bit PCM
                    "-ar", "44100",          # 44.1kHz
                    "-ac", "2"               # –°—Ç–µ—Ä–µ–æ
                ]
            )
            
            print(f"‚úÖ MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ WAV: {wav_path}")
            return wav_path
            
        except ImportError:
            print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg")
            return convert_mp3_with_ffmpeg(audio_path)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ pydub: {e}")
            return convert_mp3_with_ffmpeg(audio_path)
    
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")

def convert_mp3_with_ffmpeg(audio_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV —á–µ—Ä–µ–∑ ffmpeg
    """
    import subprocess
    import os
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è –¥–ª—è WAV —Ñ–∞–π–ª–∞
    base_name = os.path.splitext(os.path.basename(audio_path))[0]
    wav_filename = f"{base_name}_converted.wav"
    wav_path = os.path.join(os.path.dirname(audio_path), wav_filename)
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
        cmd = [
            'ffmpeg', '-i', audio_path,
            '-acodec', 'pcm_s16le',
            '-ar', '44100',
            '-ac', '2',
            '-y', wav_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ MP3 –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ ffmpeg: {wav_path}")
            return wav_path
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg: {e}")
        raise

def create_compatible_wav_for_rubberband(audio_data, sample_rate):
    """
    –°–æ–∑–¥–∞–µ—Ç WAV —Ñ–∞–π–ª –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å Rubber Band —Ñ–æ—Ä–º–∞—Ç–µ (int16, 44.1kHz, stereo)
    """
    import tempfile
    from scipy.io.wavfile import write
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_fd, temp_path = tempfile.mkstemp(suffix='.wav')
    os.close(temp_fd)
    
    try:
        print(f"üîß –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: shape={audio_data.shape}, sr={sample_rate}")
        
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_audio = audio_data.copy()
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ 44.1kHz
        target_sr = 44100
        if sample_rate != target_sr:
            print(f"üîÑ –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ —Å {sample_rate}Hz –Ω–∞ {target_sr}Hz")
            # –†–µ—Å—ç–º–ø–ª–∏–Ω–≥ –¥–æ 44.1kHz
            from scipy import signal
            processed_channels = []
            for channel in range(processed_audio.shape[0]):
                resampled = signal.resample(
                    processed_audio[channel], 
                    int(len(processed_audio[channel]) * target_sr / sample_rate)
                )
                processed_channels.append(resampled)
            processed_audio = np.array(processed_channels)
            sample_rate = target_sr
        
        print(f"üéµ –ü–æ—Å–ª–µ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: shape={processed_audio.shape}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
        if processed_audio.size == 0:
            raise ValueError("–ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16
        processed_audio = np.clip(processed_audio, -1.0, 1.0)
        
        # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (samples, channels)
        if processed_audio.ndim == 2:
            audio_for_write = processed_audio.T
            print(f"üìä –°—Ç–µ—Ä–µ–æ –¥–∞–Ω–Ω—ã–µ: {audio_for_write.shape} (samples, channels)")
        else:
            audio_for_write = processed_audio
            print(f"üìä –ú–æ–Ω–æ –¥–∞–Ω–Ω—ã–µ: {audio_for_write.shape}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16
        audio_int16 = (audio_for_write * 32767).astype(np.int16)
        
        print(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV: {audio_int16.shape}, dtype={audio_int16.dtype}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV —Ñ–∞–π–ª
        write(temp_path, sample_rate, audio_int16)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(temp_path)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π WAV: {sample_rate}Hz, int16, {'stereo' if audio_for_write.ndim == 2 else 'mono'}, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        if file_size < 1000:  # –ï—Å–ª–∏ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ 1KB, –≤–µ—Ä–æ—è—Ç–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª: {file_size} –±–∞–π—Ç")
        
        return temp_path
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ WAV: {e}")
        import traceback
        traceback.print_exc()
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            os.unlink(temp_path)
        except:
            pass
        raise

def process_audio_with_librosa(audio_path, speed_factor, preserve_pitch=True):
    """
    Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ librosa - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ scipy –∏ numpy
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ scipy
        y, sr = load_audio_with_scipy(audio_path)
        
        if y.ndim == 1:
            y = np.array([y, y])
        
        if preserve_pitch:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π STFT –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            processed = process_with_custom_stft_stretch(y, speed_factor, sr)
        else:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
            processed = process_with_resampling(y, speed_factor, sr)
        
        return processed, sr
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –ø—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        return process_audio_simple_fallback(audio_path, speed_factor)

def load_audio_with_scipy(audio_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ scipy –±–µ–∑ librosa
    """
    try:
        from scipy.io import wavfile
        import os
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        _, ext = os.path.splitext(audio_path.lower())
        
        if ext == '.wav':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV —Ñ–∞–π–ª
            sr, data = wavfile.read(audio_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
            if data.dtype == np.int16:
                data = data.astype(np.float32) / 32768.0
            elif data.dtype == np.int32:
                data = data.astype(np.float32) / 2147483648.0
            elif data.dtype == np.uint8:
                data = (data.astype(np.float32) - 128) / 128.0
            
            # –ï—Å–ª–∏ —Å—Ç–µ—Ä–µ–æ, —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            if data.ndim == 2:
                data = data.T  # (channels, samples)
            
            return data, sr
            
        elif ext == '.mp3':
            # –î–ª—è MP3 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV
            return convert_mp3_to_wav_and_load(audio_path)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: {e}")
        raise

def convert_mp3_to_wav_and_load(mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MP3 –≤ WAV –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ pydub
    """
    try:
        from pydub import AudioSegment
        import tempfile
        import os
        
        print("üéµ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MP3 —Ñ–∞–π–ª...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º MP3 —á–µ—Ä–µ–∑ pydub
        audio = AudioSegment.from_mp3(mp3_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ numpy array
        samples = audio.get_array_of_samples()
        audio_data = np.array(samples, dtype=np.float32)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        if audio.sample_width == 2:  # 16-bit
            audio_data = audio_data / 32768.0
        elif audio.sample_width == 4:  # 32-bit
            audio_data = audio_data / 2147483648.0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–µ—Ä–µ–æ
        if audio.channels == 2:
            audio_data = audio_data.reshape((-1, 2)).T
        else:
            # –ú–æ–Ω–æ -> —Å—Ç–µ—Ä–µ–æ
            audio_data = np.array([audio_data, audio_data])
        
        return audio_data, audio.frame_rate
        
    except ImportError:
        print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É")
        return load_mp3_basic(mp3_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ MP3: {e}")
        return load_mp3_basic(mp3_path)

def load_mp3_basic(mp3_path):
    """
    –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ MP3 —á–µ—Ä–µ–∑ ffmpeg
    """
    try:
        import subprocess
        import tempfile
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_wav:
            temp_wav_path = temp_wav.name
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg
        cmd = [
            'ffmpeg', '-i', mp3_path, 
            '-acodec', 'pcm_s16le', 
            '-ar', '44100', 
            '-ac', '2',
            '-y', temp_wav_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WAV
            data, sr = load_audio_with_scipy(temp_wav_path)
            os.unlink(temp_wav_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            return data, sr
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ MP3: {e}")
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        return create_silence_fallback()

def create_silence_fallback():
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–∏—à–∏–Ω—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    """
    sr = 44100
    duration = 30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
    samples = sr * duration
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É
    silence = np.zeros((2, samples), dtype=np.float32)
    
    return silence, sr

def process_with_custom_stft_stretch(y, speed_factor, sr):
    """
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT —Ä–∞—Å—Ç—è–∂–µ–Ω–∏—è –±–µ–∑ librosa
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STFT
        n_fft = 2048
        hop_length = n_fft // 4
        
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT
            stft = custom_stft(y[channel], n_fft, hop_length)
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            stretched_stft = stretch_stft(stft, speed_factor)
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ STFT
            stretched_audio = custom_istft(stretched_stft, hop_length)
            processed_channels.append(stretched_audio)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ custom STFT: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        return process_simple_stretch(y, speed_factor)

def custom_stft(signal, n_fft, hop_length):
    """
    –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è STFT
    """
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –•—ç–Ω–Ω–∏–Ω–≥–∞
    window = np.hanning(n_fft)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
    n_frames = (len(signal) - n_fft) // hop_length + 1
    
    # –ú–∞—Ç—Ä–∏—Ü–∞ STFT
    stft_matrix = np.zeros((n_fft // 2 + 1, n_frames), dtype=complex)
    
    for i in range(n_frames):
        start = i * hop_length
        end = start + n_fft
        
        if end <= len(signal):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–Ω–æ
            frame = signal[start:end] * window
            
            # FFT
            fft_frame = np.fft.rfft(frame)
            stft_matrix[:, i] = fft_frame
    
    return stft_matrix

def custom_istft(stft_matrix, hop_length):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ STFT —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    """
    n_fft = (stft_matrix.shape[0] - 1) * 2
    n_frames = stft_matrix.shape[1]
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
    window = np.hanning(n_fft)
    
    # –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    signal_length = (n_frames - 1) * hop_length + n_fft
    reconstructed = np.zeros(signal_length)
    window_sum = np.zeros(signal_length)
    
    for i in range(n_frames):
        start = i * hop_length
        end = start + n_fft
        
        if end <= len(reconstructed):
            # –û–±—Ä–∞—Ç–Ω–æ–µ FFT
            frame = np.fft.irfft(stft_matrix[:, i], n_fft)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–∫–Ω–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            windowed_frame = frame * window
            reconstructed[start:end] += windowed_frame
            window_sum[start:end] += window * window
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ —Å—É–º–º–µ –æ–∫–æ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏—Å–∫–∞–∂–µ–Ω–∏–π
    nonzero_indices = window_sum > 1e-10
    reconstructed[nonzero_indices] /= window_sum[nonzero_indices]
    
    return reconstructed

def process_audio_simple_fallback(audio_path, speed_factor):
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π fallback")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
    sr = 44100
    duration = int(10 / speed_factor)  # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏
    t = np.linspace(0, duration, sr * duration)
    
    # –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
    freq = 440
    signal = 0.3 * np.sin(2 * np.pi * freq * t)
    
    # –°—Ç–µ—Ä–µ–æ –≤–µ—Ä—Å–∏—è
    stereo_signal = np.array([signal, signal])
    
    return stereo_signal, sr

def process_with_stft_stretch(y, speed_factor, sr):
    """
    –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ STFT
    """
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã STFT
        n_fft = 2048
        hop_length = n_fft // 4
        
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –ü—Ä—è–º–æ–µ STFT
            stft = librosa.stft(y[channel], n_fft=n_fft, hop_length=hop_length)
            
            # –†–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            stretched_stft = stretch_stft(stft, speed_factor)
            
            # –û–±—Ä–∞—Ç–Ω–æ–µ STFT
            stretched_audio = librosa.istft(stretched_stft, hop_length=hop_length)
            processed_channels.append(stretched_audio)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ STFT: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
        return process_simple_stretch(y, speed_factor)

def stretch_stft(stft, speed_factor):
    """
    –†–∞—Å—Ç—è–∂–µ–Ω–∏–µ STFT –º–∞—Ç—Ä–∏—Ü—ã
    """
    original_frames = stft.shape[1]
    new_frames = int(original_frames / speed_factor)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é STFT –º–∞—Ç—Ä–∏—Ü—É
    stretched = np.zeros((stft.shape[0], new_frames), dtype=complex)
    
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ñ–∞–∑—ã –∏ –∞–º–ø–ª–∏—Ç—É–¥—ã
    for i in range(new_frames):
        source_frame = i * speed_factor
        frame_idx = int(source_frame)
        fraction = source_frame - frame_idx
        
        if frame_idx + 1 < original_frames:
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∞–º–ø–ª–∏—Ç—É–¥
            amp1 = np.abs(stft[:, frame_idx])
            amp2 = np.abs(stft[:, frame_idx + 1])
            interp_amp = amp1 * (1 - fraction) + amp2 * fraction
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–∑—É –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            phase = np.angle(stft[:, frame_idx])
            
            stretched[:, i] = interp_amp * np.exp(1j * phase)
        elif frame_idx < original_frames:
            stretched[:, i] = stft[:, frame_idx]
    
    return stretched

def process_with_resampling(y, speed_factor, sr):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥
    """
    try:
        processed_channels = []
        
        for channel in range(y.shape[0]):
            # –ò–∑–º–µ–Ω—è–µ–º –¥–ª–∏–Ω—É —Å–∏–≥–Ω–∞–ª–∞
            new_length = int(len(y[channel]) / speed_factor)
            
            # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
            old_indices = np.arange(len(y[channel]))
            new_indices = np.linspace(0, len(y[channel]) - 1, new_length)
            
            resampled = np.interp(new_indices, old_indices, y[channel])
            processed_channels.append(resampled)
        
        return np.array(processed_channels)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ—Å—ç–º–ø–ª–∏–Ω–≥–∞: {e}")
        return process_simple_stretch(y, speed_factor)

def process_simple_stretch(y, speed_factor):
    """
    –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫
    """
    processed_channels = []
    
    for channel in range(y.shape[0]):
        original_length = len(y[channel])
        new_length = int(original_length / speed_factor)
        
        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        old_indices = np.linspace(0, original_length - 1, original_length)
        new_indices = np.linspace(0, original_length - 1, new_length)
        
        stretched = np.interp(new_indices, old_indices, y[channel])
        processed_channels.append(stretched)
    
    return np.array(processed_channels)

def process_audio_simple(audio_path, speed_factor):
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π fallback
    """
    y, sr = librosa.load(audio_path, sr=None, mono=False)
    
    if y.ndim == 1:
        y = np.array([y, y])
    
    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
    original_length = y.shape[1]
    new_length = int(original_length / speed_factor)
    
    processed = np.zeros((y.shape[0], new_length))
    for channel in range(y.shape[0]):
        processed[channel] = np.interp(
            np.linspace(0, original_length - 1, new_length),
            np.arange(original_length),
            y[channel]
        )
    
    return processed, sr

def save_with_scipy(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ scipy
    """
    try:
        from scipy.io.wavfile import write
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è scipy
        if processed_audio.ndim == 2:
            # –î–ª—è —Å—Ç–µ—Ä–µ–æ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º: (channels, samples) -> (samples, channels)
            audio_for_scipy = processed_audio.T
        else:
            # –ú–æ–Ω–æ
            audio_for_scipy = processed_audio
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 16-bit integer
        audio_for_scipy = np.clip(audio_for_scipy, -1.0, 1.0)
        audio_int16 = (audio_for_scipy * 32767).astype(np.int16)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º WAV —Ñ–∞–π–ª
        write(output_path, sr, audio_int16)
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ scipy: {output_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ scipy: {e}")
        raise

def normalize_audio(audio):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ–º –∫–ª–∏–ø–ø–∏–Ω–≥–∞
    """
    # RMS –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
    rms = np.sqrt(np.mean(audio**2))
    if rms > 0:
        # –¶–µ–ª–µ–≤–æ–π RMS —É—Ä–æ–≤–µ–Ω—å
        target_rms = 0.2
        audio = audio * (target_rms / rms)
    
    # –ú—è–≥–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∏–∫–æ–≤
    peak = np.max(np.abs(audio))
    if peak > 0.95:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tanh –¥–ª—è –º—è–≥–∫–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        audio = np.tanh(audio * 0.9) * 0.9
    
    return audio

def save_audio_in_format(output_path, processed_audio, sr, output_format='wav'):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (WAV –∏–ª–∏ MP3)
    """
    try:
        if output_format.lower() == 'mp3':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MP3
            return save_as_mp3(output_path, processed_audio, sr)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            return save_as_wav(output_path, processed_audio, sr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format}: {e}")
        raise

def save_as_wav(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ WAV
    """
    try:
        if HAS_SOUNDFILE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º soundfile –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                if processed_audio.ndim == 2:
                    # soundfile –æ–∂–∏–¥–∞–µ—Ç (samples, channels)
                    audio_for_sf = processed_audio.T
                else:
                    audio_for_sf = processed_audio
                
                sf.write(output_path, audio_for_sf, sr, format='WAV', subtype='PCM_16')
                print(f"‚úÖ WAV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —á–µ—Ä–µ–∑ soundfile: {output_path}")
                return output_path
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ soundfile: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º scipy")
                return save_with_scipy(output_path, processed_audio, sr)
        else:
            return save_with_scipy(output_path, processed_audio, sr)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è WAV: {e}")
        raise

def save_as_mp3(output_path, processed_audio, sr):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        temp_wav_path = output_path.replace('.mp3', '_temp.wav')
        save_as_wav(temp_wav_path, processed_audio, sr)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3
        return convert_wav_to_mp3(temp_wav_path, output_path)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3: {e}")
        raise

def convert_wav_to_mp3(wav_path, mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV –≤ MP3 —á–µ—Ä–µ–∑ pydub –∏–ª–∏ ffmpeg
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pydub
        from pydub import AudioSegment
        
        print(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WAV –≤ MP3: {wav_path} -> {mp3_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º WAV
        audio = AudioSegment.from_wav(wav_path)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ MP3 —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        audio.export(
            mp3_path,
            format="mp3",
            bitrate="320k",  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            parameters=["-q:a", "0"]  # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
        try:
            os.unlink(wav_path)
        except:
            pass
        
        print(f"‚úÖ MP3 —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {mp3_path}")
        return mp3_path
        
    except ImportError:
        print("‚ö†Ô∏è pydub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg")
        return convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ pydub: {e}")
        return convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path)

def convert_wav_to_mp3_with_ffmpeg(wav_path, mp3_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è WAV –≤ MP3 —á–µ—Ä–µ–∑ ffmpeg
    """
    try:
        import subprocess
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ ffmpeg —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        cmd = [
            'ffmpeg', '-i', wav_path,
            '-codec:a', 'libmp3lame',
            '-b:a', '320k',  # –í—ã—Å–æ–∫–∏–π –±–∏—Ç—Ä–µ–π—Ç
            '-q:a', '0',     # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            '-y', mp3_path
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            try:
                os.unlink(wav_path)
            except:
                pass
            
            print(f"‚úÖ MP3 —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ ffmpeg: {mp3_path}")
            return mp3_path
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3")
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ ffmpeg: {e}")
        raise

@app.route('/progress/<session_id>', methods=['GET'])
def get_progress(session_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ polling"""
    try:
        if session_id in progress_storage:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏
            return jsonify({
                'success': True,
                'progress': progress_storage[session_id],
                'count': len(progress_storage[session_id])
            })
        else:
            return jsonify({
                'success': True,
                'progress': [],
                'count': 0
            })
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/progress/<session_id>/clear', methods=['POST'])
def clear_progress(session_id):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏"""
    try:
        if session_id in progress_storage:
            del progress_storage[session_id]
        return jsonify({'success': True})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({'status': 'healthy', 'message': 'Audio processing server is running'})

@app.route('/process', methods=['POST'])
def process_audio():
    """–û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if 'files' not in request.files:
            return jsonify({'error': '–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
        
        files = request.files.getlist('files')
        speeds = request.form.getlist('speeds')
        preserve_pitch = request.form.get('preserve_pitch', 'true').lower() == 'true'
        output_format = request.form.get('output_format', 'wav').lower()
        session_id = request.form.get('session_id', 'default')
        
        if len(files) != len(speeds):
            return jsonify({'error': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç–µ–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if output_format not in ['wav', 'mp3']:
            return jsonify({'error': f'–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {output_format}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: wav, mp3'}), 400
        
        print(f"üéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}")
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: preserve_pitch={preserve_pitch}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        send_progress(session_id, 0, len(files), 0.0, f'–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(files)} —Ñ–∞–π–ª–æ–≤', 'info')
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        temp_dir = tempfile.mkdtemp()
        processed_files = []
        
        try:
            for i, (file, speed_str) in enumerate(zip(files, speeds)):
                if file.filename == '':
                    continue
                
                try:
                    speed = float(speed_str)
                    if speed <= 0 or speed > 10:
                        return jsonify({'error': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}'}), 400
                except ValueError:
                    return jsonify({'error': f'–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏: {speed_str}'}), 400
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                input_path = os.path.join(temp_dir, f'input_{i}_{file.filename}')
                file.save(input_path)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                try:
                    send_progress(session_id, i, len(files), 0.1, f'–ó–∞–≥—Ä—É–∑–∫–∞ {file.filename}', 'info')
                    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i+1}/{len(files)}: {file.filename}")
                    print(f"üéõÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: {speed}x, –§–æ—Ä–º–∞—Ç: {output_format.upper()}")
                    
                    send_progress(session_id, i, len(files), 0.3, f'–û–±—Ä–∞–±–æ—Ç–∫–∞ {file.filename}', 'info')
                    processed_audio, sr = process_audio_with_rubberband(
                        input_path, speed, preserve_pitch
                    )
                    
                    send_progress(session_id, i, len(files), 0.6, f'–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è {file.filename}', 'info')
                    print(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...")
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
                    processed_audio = normalize_audio(processed_audio)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∏ –ø—É—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                    base_name = os.path.splitext(file.filename)[0]
                    output_filename = f"{base_name}_slowed.{output_format}"
                    output_path = os.path.join(temp_dir, output_filename)
                    
                    send_progress(session_id, i, len(files), 0.8, f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {output_format.upper()}', 'info')
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ {output_format.upper()}: {processed_audio.shape}, sr={sr}")
                    
                    final_path = save_audio_in_format(output_path, processed_audio, sr, output_format)
                    processed_files.append((final_path, output_filename))
                    
                    send_progress(session_id, i, len(files), 1.0, f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {file.filename}', 'success')
                    print(f"‚úÖ –§–∞–π–ª {file.filename} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as e:
                    send_progress(session_id, i, len(files), 0.0, f'–û—à–∏–±–∫–∞: {file.filename}', 'error')
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {e}")
                    return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}'}), 500
            
            if not processed_files:
                return jsonify({'error': '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'}), 400
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞
            send_progress(session_id, len(files), len(files), 0.9, '–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞', 'info')
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            zip_buffer = io.BytesIO()
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for file_path, filename in processed_files:
                    zip_file.write(file_path, filename)
            
            zip_buffer.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            send_progress(session_id, len(files), len(files), 1.0, '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'complete')
            
            return send_file(
                zip_buffer,
                mimetype='application/zip',
                as_attachment=True,
                download_name='slowed_audio_files.zip'
            )
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass
                
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return jsonify({'error': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500

@app.route('/test', methods=['POST'])
def test_processing():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if 'file' not in request.files:
            return jsonify({'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 400
        
        file = request.files['file']
        speed = float(request.form.get('speed', 0.5))
        preserve_pitch = request.form.get('preserve_pitch', 'true').lower() == 'true'
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_dir = tempfile.mkdtemp()
        input_path = os.path.join(temp_dir, file.filename)
        file.save(input_path)
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            processed_audio, sr = process_audio_with_rubberband(input_path, speed, preserve_pitch)
            processed_audio = normalize_audio(processed_audio)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            return jsonify({
                'success': True,
                'original_duration': librosa.get_duration(path=input_path),
                'processed_duration': len(processed_audio[0]) / sr if processed_audio.ndim == 2 else len(processed_audio) / sr,
                'sample_rate': int(sr),
                'channels': processed_audio.shape[0] if processed_audio.ndim == 2 else 1,
                'speed_factor': speed,
                'preserve_pitch': preserve_pitch
            })
            
        finally:
            import shutil
            try:
                shutil.rmtree(temp_dir)
            except:
                pass
                
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print(f"üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {request.sid}")
    emit('connected', {'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print(f"üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {request.sid}")

@socketio.on('join_session')
def handle_join_session(data):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    session_id = data.get('session_id')
    if session_id:
        join_room(session_id)
        print(f"üë• –ö–ª–∏–µ–Ω—Ç {request.sid} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ {session_id}")
        emit('session_joined', {'session_id': session_id})

@socketio.on('leave_session')
def handle_leave_session(data):
    """–ü–æ–∫–∏–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    session_id = data.get('session_id')
    if session_id:
        leave_room(session_id)
        print(f"üë• –ö–ª–∏–µ–Ω—Ç {request.sid} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Å—Å–∏—é {session_id}")
        emit('session_left', {'session_id': session_id})

if __name__ == '__main__':
    print("üéµ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...")
    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã:")
    print("   1. Rubber Band (–ª—É—á—à–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞)")
    print("   2. Librosa Phase Vocoder (fallback)")
    print("   3. –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)")
    print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5230")
    print("üì° WebSocket –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ ws://localhost:5230")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º SocketIO –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    import os
    if os.environ.get('FLASK_ENV') == 'production':
        # –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º eventlet
        socketio.run(app, debug=False, host='0.0.0.0', port=5230)
    else:
        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
        socketio.run(app, debug=True, host='0.0.0.0', port=5230)
