import React, { useState, useRef } from 'react';

function App() {
  const [files, setFiles] = useState([]);
  const [globalSpeed, setGlobalSpeed] = useState(0.5);
  const [preservePitch, setPreservePitch] = useState(true);
  const [outputFormat, setOutputFormat] = useState('wav'); // 'wav' –∏–ª–∏ 'mp3'
  const [processing, setProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [backendStatus, setBackendStatus] = useState('checking');
  const [processingLog, setProcessingLog] = useState([]);
  const [currentFile, setCurrentFile] = useState('');
  const fileInputRef = useRef(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∫–µ–Ω–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  React.useEffect(() => {
    checkBackendHealth();
  }, []);

  const checkBackendHealth = async () => {
    try {
      const response = await fetch('/health');
      if (response.ok) {
        setBackendStatus('connected');
        setMessage('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        setMessageType('success');
        setTimeout(() => setMessage(''), 3000);
      } else {
        setBackendStatus('error');
      }
    } catch (error) {
      setBackendStatus('error');
      setMessage('‚ùå –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Python –±–µ–∫–µ–Ω–¥.');
      setMessageType('error');
    }
  };

  const handleFileSelect = (event) => {
    const selectedFiles = Array.from(event.target.files);
    const audioFiles = selectedFiles.filter(file => 
      file.type === 'audio/mp3' || file.type === 'audio/wav' || 
      file.type === 'audio/mpeg' || file.type === 'audio/x-wav'
    );

    if (audioFiles.length !== selectedFiles.length) {
      setMessage('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ MP3 –∏ WAV —Ñ–∞–π–ª—ã.');
      setMessageType('error');
      setTimeout(() => setMessage(''), 3000);
    }

    const newFiles = audioFiles.map((file, index) => ({
      id: Date.now() + index,
      file: file,
      name: file.name,
      size: file.size,
      speed: globalSpeed
    }));

    setFiles(prev => [...prev, ...newFiles]);
    event.target.value = '';
  };

  const removeFile = (id) => {
    setFiles(files.filter(file => file.id !== id));
  };

  const updateFileSpeed = (id, speed) => {
    setFiles(files.map(file => 
      file.id === id ? { ...file, speed: parseFloat(speed) } : file
    ));
  };

  const applyGlobalSpeed = () => {
    setFiles(files.map(file => ({ ...file, speed: globalSpeed })));
    setMessage('–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º');
    setMessageType('success');
    setTimeout(() => setMessage(''), 2000);
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const addToLog = (message, type = 'info') => {
    const timestamp = new Date().toLocaleTimeString();
    setProcessingLog(prev => [...prev, { 
      id: Date.now(), 
      message, 
      type, 
      timestamp 
    }]);
  };

  const clearLog = () => {
    setProcessingLog([]);
    setCurrentFile('');
  };

  const updateProgress = (fileIndex, totalFiles, step, message) => {
    const baseProgress = (fileIndex / totalFiles) * 80; // 80% –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
    const stepProgress = step * (80 / totalFiles); // –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const totalProgress = Math.min(baseProgress + stepProgress, 90);
    
    setProgress(totalProgress);
    setCurrentFile(`–§–∞–π–ª ${fileIndex + 1}/${totalFiles}: ${message}`);
    // –£–±–∏—Ä–∞–µ–º addToLog –æ—Ç—Å—é–¥–∞ - —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –æ—Ç backend
  };

  const addBackendLogEntry = (entry) => {
    const timestamp = new Date().toLocaleTimeString();
    setProcessingLog(prev => [...prev, { 
      id: Date.now() + Math.random(), // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      message: entry.message, 
      type: entry.type, 
      timestamp 
    }]);
  };

  const getProcessButtonText = () => {
    if (processing) {
      return '–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...';
    }

    if (files.length === 0) {
      return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏';
    }

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é (–Ω–µ —Ä–∞–≤–Ω–æ–π 1.0)
    const changedSpeedFiles = files.filter(file => Math.abs(file.speed - 1.0) > 0.001);
    const formatText = outputFormat.toUpperCase();

    if (changedSpeedFiles.length === 0) {
      // –í—Å–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Å–∫–æ—Ä–æ—Å—Ç—å 1.0 - —Ç–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
      return `–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ ${formatText}`;
    } else {
      // –ï—Å—Ç—å —Ñ–∞–π–ª—ã —Å –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      return `–ó–∞–º–µ–¥–ª–∏—Ç—å (${changedSpeedFiles.length}) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ ${formatText}`;
    }
  };

  const processFiles = async () => {
    if (files.length === 0) {
      setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      setMessageType('error');
      setTimeout(() => setMessage(''), 3000);
      return;
    }

    if (backendStatus !== 'connected') {
      setMessage('‚ùå –°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
      setMessageType('error');
      setTimeout(() => setMessage(''), 3000);
      return;
    }

    setProcessing(true);
    setProgress(0);
    clearLog();
    setMessage('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞ (—Ç–æ–ª—å–∫–æ frontend —Å–æ–æ–±—â–µ–Ω–∏—è)
      addToLog('üéµ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ', 'info');
      addToLog(`üìÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`, 'info');
      addToLog(`‚öôÔ∏è –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞: ${outputFormat.toUpperCase()}`, 'info');
      addToLog(`üéõÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: ${preservePitch ? '–î–∞' : '–ù–µ—Ç'}`, 'info');

      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (–±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —ç—Ç–æ –±—É–¥–µ—Ç –≤ backend)
      files.forEach((fileData, index) => {
        formData.append('files', fileData.file);
        formData.append('speeds', fileData.speed.toString());
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      formData.append('preserve_pitch', preservePitch.toString());
      formData.append('output_format', outputFormat);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
      const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      formData.append('session_id', sessionId);

      setCurrentFile('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
      setProgress(5);
      addToLog('üì§ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'info');

      setMessage('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...');

      // –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      let lastProgressCount = 0;
      const pollProgress = async () => {
        try {
          const progressResponse = await fetch(`/progress/${sessionId}`);
          if (progressResponse.ok) {
            const progressData = await progressResponse.json();
            
            if (progressData.success && progressData.progress.length > lastProgressCount) {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
              const newEntries = progressData.progress.slice(lastProgressCount);
              
              for (const entry of newEntries) {
                console.log('–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å:', entry);
                
                if (entry.type === 'complete') {
                  addToLog('üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');
                  clearInterval(progressInterval);
                  return;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç backend –≤ –ª–æ–≥
                addBackendLogEntry(entry);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                updateProgress(entry.file_index, entry.total_files, entry.step, entry.message);
              }
              
              lastProgressCount = progressData.progress.length;
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ polling –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
      };

      addToLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É', 'info');

      // –ó–∞–ø—É—Å–∫–∞–µ–º polling –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã (—É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É)
      const progressInterval = setInterval(async () => {
        try {
          const progressResponse = await fetch(`/progress/${sessionId}`);
          if (progressResponse.ok) {
            const progressData = await progressResponse.json();
            
            if (progressData.success && progressData.progress.length > lastProgressCount) {
              // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
              const newEntries = progressData.progress.slice(lastProgressCount);
              
              for (const entry of newEntries) {
                console.log('–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å:', entry);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç backend –≤ –ª–æ–≥
                addBackendLogEntry(entry);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                if (entry.file_index !== undefined && entry.total_files !== undefined) {
                  updateProgress(entry.file_index, entry.total_files, entry.step || 0, entry.message);
                }
              }
              
              lastProgressCount = progressData.progress.length;
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ polling –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        }
      }, 3000); // –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      const response = await fetch('/process', {
        method: 'POST',
        body: formData,
      });
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
      clearInterval(progressInterval);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
      await pollProgress();

      if (!response.ok) {
        if (response.status === 413) {
          throw new Error('–§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–º—É.');
        }
        const errorData = await response.json().catch(() => ({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
        throw new Error(errorData.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status})`);
      }

      setCurrentFile('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
      setProgress(90);
      addToLog('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      addToLog('üì¶ –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', 'info');

      // –ü–æ–ª—É—á–∞–µ–º ZIP —Ñ–∞–π–ª
      const blob = await response.blob();
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = 'slowed_audio_files.zip';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      setProgress(100);
      setCurrentFile('–ì–æ—Ç–æ–≤–æ! –ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω.');
      setMessage('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω.');
      setMessageType('success');
      addToLog('üéâ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      setMessage(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
      setMessageType('error');
      addToLog(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
      setCurrentFile('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    } finally {
      setProcessing(false);
      setTimeout(() => {
        setMessage('');
        setProgress(0);
        setCurrentFile('');
      }, 5230);
    }
  };

  const testConnection = async () => {
    setMessage('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
    setMessageType('info');
    await checkBackendHealth();
  };

  return (
    <div className="container">
      <div className="header">
        <h1>SETINA Slowdown App</h1>
        <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Rubber Band –∞–ª–≥–æ—Ä–∏—Ç–º–∞</p>
        
        <div className="backend-status">
          <div className={`status-indicator ${backendStatus}`}>
            <span className="status-dot"></span>
            {backendStatus === 'connected' && '–°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω'}
            {backendStatus === 'error' && '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
            {backendStatus === 'checking' && '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...'}
          </div>
          {backendStatus === 'error' && (
            <button onClick={testConnection} className="test-connection-btn">
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            </button>
          )}
        </div>
      </div>

      <div className="upload-section">
        <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤</h2>
        <input
          ref={fileInputRef}
          type="file"
          multiple
          accept=".mp3,.wav,audio/mp3,audio/wav,audio/mpeg,audio/x-wav"
          onChange={handleFileSelect}
          className="file-input"
          disabled={backendStatus !== 'connected'}
        />
        <p>–í—ã–±–µ—Ä–∏—Ç–µ MP3 –∏–ª–∏ WAV —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</p>

        {files.length > 0 && (
          <div className="file-list">
            <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({files.length})</h3>
            {files.map(file => (
              <div key={file.id} className="file-item">
                <div className="file-info">
                  <div className="file-name">{file.name}</div>
                  <div className="file-size">{formatFileSize(file.size)}</div>
                </div>
                <div className="file-controls">
                  <div className="file-speed-control">
                    <label>–°–∫–æ—Ä–æ—Å—Ç—å: {file.speed}x</label>
                    <input
                      type="range"
                      min="0.1"
                      max="2.0"
                      step="0.05"
                      value={file.speed}
                      onChange={(e) => updateFileSpeed(file.id, e.target.value)}
                      className="speed-slider file-speed-slider"
                      disabled={processing}
                    />
                  </div>
                  <button
                    onClick={() => removeFile(file.id)}
                    className="remove-btn"
                    disabled={processing}
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      <div className="settings-section">
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
        <div className="settings-row">
          <label>–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {globalSpeed}x</label>
          <div className="slider-container">
            <input
              type="range"
              min="0.1"
              max="2.0"
              step="0.05"
              value={globalSpeed}
              onChange={(e) => setGlobalSpeed(parseFloat(e.target.value))}
              className="speed-slider global-speed-slider"
              disabled={processing}
            />
            <div className="slider-labels">
              <span>0.1x</span>
              <span>1.0x</span>
              <span>2.0x</span>
            </div>
          </div>
          <button 
            onClick={applyGlobalSpeed} 
            className="apply-global-btn"
            disabled={processing || files.length === 0}
          >
            –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º
          </button>
        </div>
        <div className="settings-row">
          <label>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</label>
          <div className="checkbox-container">
            <input
              type="checkbox"
              checked={preservePitch}
              onChange={(e) => setPreservePitch(e.target.checked)}
              disabled={processing}
            />
            <span>{preservePitch ? '–î–∞ (Rubber Band)' : '–ù–µ—Ç (–ø—Ä–æ—Å—Ç–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)'}</span>
          </div>
        </div>
        <div className="settings-row">
          <label>–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:</label>
          <div className="radio-container">
            <label className="radio-option">
              <input
                type="radio"
                name="outputFormat"
                value="wav"
                checked={outputFormat === 'wav'}
                onChange={(e) => setOutputFormat(e.target.value)}
                disabled={processing}
              />
              <span>WAV (–±–µ–∑ –ø–æ—Ç–µ—Ä—å)</span>
            </label>
            <label className="radio-option">
              <input
                type="radio"
                name="outputFormat"
                value="mp3"
                checked={outputFormat === 'mp3'}
                onChange={(e) => setOutputFormat(e.target.value)}
                disabled={processing}
              />
              <span>MP3 (—Å–∂–∞—Ç—ã–π)</span>
            </label>
          </div>
        </div>
        <p style={{ fontSize: '14px', color: '#666', marginTop: '10px' }}>
          * –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ–Ω—å—à–µ 1.0 –∑–∞–º–µ–¥–ª—è–µ—Ç –∞—É–¥–∏–æ, –±–æ–ª—å—à–µ 1.0 - —É—Å–∫–æ—Ä—è–µ—Ç<br/>
          * Rubber Band –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        </p>
      </div>

      <div className="process-section">
        <button
          onClick={processFiles}
          disabled={processing || files.length === 0 || backendStatus !== 'connected'}
          className="process-btn"
        >
          {getProcessButtonText()}
        </button>

        {processing && (
          <div className="progress-container">
            <div className="progress-info">
              <div className="current-file">{currentFile || '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...'}</div>
              <div className="progress-bar">
                <div 
                  className="progress-fill" 
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <div className="progress-text">{Math.round(progress)}%</div>
            </div>
            
            {processingLog.length > 0 && (
              <div className="processing-log">
                <div className="log-header">
                  <h4>–õ–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h4>
                  <button onClick={clearLog} className="clear-log-btn">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
                <div className="log-content">
                  {processingLog.slice(-10).map(entry => (
                    <div key={entry.id} className={`log-entry log-${entry.type}`}>
                      <span className="log-time">{entry.timestamp}</span>
                      <span className="log-message">{entry.message}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        )}

        {message && (
          <div className={`message ${messageType === 'error' ? 'error-message' : messageType === 'success' ? 'success-message' : 'info-message'}`}>
            {message}
          </div>
        )}
      </div>

      {backendStatus === 'error' && (
        <div className="backend-instructions">
          <h3>üêç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É Python —Å–µ—Ä–≤–µ—Ä–∞:</h3>
          <div className="code-block">
            <code>
              cd backend<br/>
              pip install -r requirements.txt<br/>
              python app.py
            </code>
          </div>
          <p>–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:5230</p>
        </div>
      )}
    </div>
  );
}

export default App;
